-------------------------CH-12-Exposing Applications for External Access----------------------------------

Accessing Application from External Networks

OpenShift Container Platform offers many ways to expose your applications to external networks.
You can expose HTTP and HTTPS traffic, TCP applications, and also non-TCP traffic. Some of
these methods are service types, such as NodePort or load balancer, while others use their own
API resource, such as Ingress and Route.
OpenShift routes allow you to expose your applications to external networks. With routes, you can
access your application with a unique host name that is publicly accessible. Routes rely on a router
plug-in to redirect the traffic from the public IP to pods.

Note
For performance reasons, routers send requests directly to pods based on service
configuration.
The dotted line indicates this implementation. That is, the router accesses the pods
through the services network.

Describing Methods for Managing Ingress Traffic
The most common way to manage ingress traffic is with the Ingress Controller. OpenShift
implements the Ingress Controller with a shared router service that runs as a pod inside the cluster.
You can scale and replicate this pod like any other regular pod. This router service is based on the
open source software HAProxy.
Routes and ingress are the main resources for handling ingress traffic.

Route
Routes provide ingress traffic to services in the cluster. Routes were created before
Kubernetes ingress objects and provide more features. Routes provide advanced features that
may not be supported by Kubernetes ingress controllers through a standard interface, such as
TLS re-encryption, TLS passthrough, and split traffic for blue-green deployments.

Ingress
An ingress is a Kubernetes resource that provides some of the same features as routes (which
are an OpenShift resource). Ingresses accept external requests and proxy them based on the
route. You can only allow certain types of traffic: HTTP, HTTPS and server name identification
(SNI), and TLS with SNI. In OpenShift, routes are generated to meet the conditions specified
by the ingress object.
There are alternatives to ingress and routes, but they are for special use cases. The following
service types provide external access to services.

External load balancer
This resources instructs OpenShift to spin up a load balancer in a cloud environment. A load
balancer instructs OpenShift to interact with the cloud provider in which the cluster is running
to provision a load balancer.

Service external IP
This method instructs OpenShift to set NAT rules to redirect traffic from one of the cluster IPs
to the container.

NodePort
With this method, OpenShift exposes a service on a static port on the node IP address. You
must ensure that the external IP addresses are properly routed to the nodes.

Creating Routes
The easiest and preferred way to create a route (secure or insecure) is to use the oc expose
service service command, where service corresponds to a service. Use the --hostname
option to provide a custom host name for the route.

[user@demo ~]$ oc expose service api-frontend --hostname api.apps.acme.com

Important
The DNS server that hosts the wildcard domain is unaware of any route host names;
it only resolves any name to the configured IPs. Only the OpenShift router knows
about route host names, treating each one as an HTTP virtual host.
Invalid wildcard domain host names, that is, host names that do not correspond to
any route, are blocked by the OpenShift router and result in an HTTP 404 error.

Note
You can also let OpenShift automatically generate a host name for the route.
An optional path, for path-based routes.
• A target port on which the application listens. The target port usually corresponds to the port
that you define in the targetPort key of a service.
• An encryption strategy, depending on whether you need a secure or insecure route.
The following listing shows a minimal definition for a route:
kind: Route
apiVersion: route.openshift.io/v1
metadata:
name: a-simple-route
labels:
app: API
name: api-frontend
spec:
host: api.apps.acme.com
to:
kind: Service
name: api-frontend
port:
targetPort: 8443

The name of the route. This name must be unique.
A set of labels that you can use as selectors.
The host name of the route. This host name must be a subdomain of your wildcard domain
because OpenShift routes the wildcard domain to the routers.
The service to which to redirect the traffic. Although you use a service name, the route only
uses this information to determine the list of pods that receive the traffic.
The application port. Because routes bypass services, this must match the application port
and not the service port.

Securing Routes
Routes can be either secured or unsecured. Secure routes provide the ability to use several
types of TLS termination to serve certificates to the client. Unsecured routes are the simplest to
configure because they require no key or certificates, but secured routes encrypt traffic to and
from the pods.

A secured route specifies the TLS termination of the route. The available types of termination are
presented in the following list.
OpenShift Secure Routes

Edge
With edge termination, TLS termination occurs at the router, before the traffic is routed to
the pods. The router serves the TLS certificates, so you must configure them into the route;
otherwise, OpenShift assigns its own certificate to the router for TLS termination. Because
TLS is terminated at the router, connections from the router to the endpoints over the internal
network are not encrypted.

Passthrough
With passthrough termination, encrypted traffic is sent straight to the destination pod without
the router providing TLS termination. In this mode, the application is responsible for serving
certificates for the traffic. Passthrough is currently the only method that supports mutual
authentication between the application and a client that accesses it.

Re-encryption
Re-encryption is a variation on edge termination, whereby the router terminates TLS with a
certificate, and then re-encrypts its connection to the endpoint, which might have a different
certificate. Therefore, the full path of the connection is encrypted, even over the internal
network. The router uses health checks to determine the authenticity of the host.


-------------------------CH-12-GE-Exposing Applications for External Access----------------------------------------

In this exercise, you will expose an application secured by TLS certificates.
Outcomes
You should be able to:
• Deploy an application and create an unencrypted route for it.
• Create an OpenShift edge route with encryption.
• Update an OpenShift deployment to support a new version of the application.
• Create an OpenShift TLS secret and mount it to your application.
• Verify that the communication to the application is encrypted.

[student@workstation ~]$ lab network-ingress start

Checking prerequisites for Guided Exercise: Controlling Cluster Network Ingress

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'network-ingress' project is absent.....................  SUCCESS

Setting up the classroom for Guided Exercise: Controlling Cluster Network Ingress

 · Validate 'admin' can log in with password 'redhat'..........  SUCCESS
 · Validate 'leader' can log in with password 'redhat'.........  SUCCESS
 · Validate 'developer' can log in with password 'developer'...  SUCCESS
 Preparing Workstation:
 · Download exercise files.....................................  SUCCESS
 Configuring Certificates:
 · Generating unique CA key password...........................  SUCCESS
 · Setting environment variable in cert. configuration file....  SUCCESS
 · Generating the CA key.......................................  SUCCESS
 · Generating CA certificate...................................  SUCCESS
 · Updating privileges on certs directory......................  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ oc login -u developer -p developer https://api.ocp4.example.com:6443
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc new-project network-ingress
Now using project "network-ingress" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc create -f ~/DO280/labs/network-ingress/todo-app-v1.yaml
deployment.apps/todo-http created
service/todo-http created
[student@workstation ~]$ oc get status
error: the server doesn't have a resource type "status"
[student@workstation ~]$ oc status
In project network-ingress on server https://api.ocp4.example.com:6443

svc/todo-http - 172.30.164.146:80 -> 8080
  deployment/todo-http deploys quay.io/redhattraining/todo-angular:v1.1
    deployment #1 running for 17 seconds - 0/1 pods


1 info identified, use 'oc status --suggest' to see details.
[student@workstation ~]$ oc get all
NAME                             READY   STATUS    RESTARTS   AGE
pod/todo-http-59446d7885-pvvdl   1/1     Running   0          22s

NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
service/todo-http   ClusterIP   172.30.164.146   <none>        80/TCP    23s

NAME                        READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/todo-http   1/1     1            1           23s

NAME                                   DESIRED   CURRENT   READY   AGE
replicaset.apps/todo-http-59446d7885   1         1         1       23s
[student@workstation ~]$ oc expose svc todo-http --hostname todo-http.apps.ocp4.example.com
route.route.openshift.io/todo-http exposed
[student@workstation ~]$ oc get routes
NAME        HOST/PORT                         PATH   SERVICES    PORT   TERMINATION   WILDCARD
todo-http   todo-http.apps.ocp4.example.com          todo-http   8080                 None
[student@workstation ~]$ ip a | grep 172.25.250.9
    inet 172.25.250.9/24 brd 172.25.250.255 scope global noprefixroute eth0
[student@workstation ~]$ sudo tcpdump -i eth0 -A -n port 80 | grep js
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
^C7 packets captured
7 packets received by filter
0 packets dropped by kernel

[student@workstation ~]$ cd ~/DO280/labs/network-ingress
[student@workstation network-ingress]$ oc create route edge todo-https --service todo-http --hostname todo-https.apps.ocp4.example.com
route.route.openshift.io/todo-https created
[student@workstation network-ingress]$ curl https://todo-https.apps.ocp4.example.com
curl: (60) SSL certificate problem: self signed certificate in certificate chain
More details here: https://curl.haxx.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.
[student@workstation network-ingress]$ oc login -u admin -p redhat
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "network-ingress".
[student@workstation network-ingress]$ oc extract secrets/router-ca --keys tls.crt -n openshift-ingress-operator
tls.crt
[student@workstation network-ingress]$ curl -I -v --cacert tls.crt https://todo-https.apps.ocp4.example.com
* Rebuilt URL to: https://todo-https.apps.ocp4.example.com/
*   Trying 192.168.50.254...
* TCP_NODELAY set
* Connected to todo-https.apps.ocp4.example.com (192.168.50.254) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: tls.crt
  CApath: none
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
* TLSv1.2 (IN), TLS handshake, Server finished (14):
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.2 (OUT), TLS handshake, Finished (20):
* TLSv1.2 (IN), TLS handshake, Finished (20):
* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
* ALPN, server did not agree to a protocol
* Server certificate:
*  subject: CN=*.apps.ocp4.example.com
*  start date: Aug  5 18:28:25 2020 GMT
*  expire date: Aug  5 18:28:26 2022 GMT
*  subjectAltName: host "todo-https.apps.ocp4.example.com" matched cert's "*.apps.ocp4.example.com"
*  issuer: CN=ingress-operator@1596652102
*  SSL certificate verify ok.
> HEAD / HTTP/1.1
> Host: todo-https.apps.ocp4.example.com
> User-Agent: curl/7.61.1
> Accept: */*
> 
< HTTP/1.1 200 OK
HTTP/1.1 200 OK
< server: nginx/1.14.1
server: nginx/1.14.1
< date: Sat, 22 May 2021 05:49:15 GMT
date: Sat, 22 May 2021 05:49:15 GMT
< content-type: text/html
content-type: text/html
< set-cookie: 947acc174fec7aa4880f048abd1ce952=53a9311e8370d6e50e992c92d74e98c3; path=/; HttpOnly; Secure
set-cookie: 947acc174fec7aa4880f048abd1ce952=53a9311e8370d6e50e992c92d74e98c3; path=/; HttpOnly; Secure
< cache-control: private
cache-control: private

< 
* Connection #0 to host todo-https.apps.ocp4.example.com left intact
[student@workstation network-ingress]$ oc login -u developer -p developer
Login successful.

You have one project on this server: "network-ingress"

Using project "network-ingress".
[student@workstation network-ingress]$ oc get svc todo-http -o jsonpath="{.spec.clusterIP}{'\n'}"
172.30.164.146
[student@workstation network-ingress]$ oc debug -t deployment/todo-http --image registry.access.redhat.com/ubi8/ubi:8.0
Starting pod/todo-http-debug ...
Pod IP: 10.9.0.41
If you don't see a command prompt, try pressing enter.
sh-4.4$ curl -v 172.30.164.146
* Rebuilt URL to: 172.30.164.146/
*   Trying 172.30.164.146...
* TCP_NODELAY set
* Connected to 172.30.164.146 (172.30.164.146) port 80 (#0)
> GET / HTTP/1.1
> Host: 172.30.164.146
> User-Agent: curl/7.61.1
> Accept: */*
> 
< HTTP/1.1 200 OK
< Server: nginx/1.14.1
< Date: Sat, 22 May 2021 05:50:59 GMT
< Content-Type: text/html
< Transfer-Encoding: chunked
< Connection: keep-alive
< 
<!DOCTYPE html>
<html lang="en" ng-app="todoItemsApp" ng-controller="appCtl">
<head>
    <meta charset="utf-8">
    <title>ToDo app</title>

    <link rel="stylesheet" href="assets/css/libs/bootstrap/bootstrap.css">
    <link rel="stylesheet" href="assets/css/libs/angular-motion/angular-motion.css">
    <link rel="stylesheet" href="assets/css/libs/angular-xeditable/xeditable.css">

    <link rel="stylesheet" href="assets/css/app.css">

    <script type="text/javascript" src="assets/js/libs/jquery/jquery-1.11.1.min.js"></script>
    <script type="text/javascript" src="assets/js/libs/bootstrap/bootstrap.min.js"></script>
    <script type="text/javascript" src="assets/js/libs/angular/angular.min.js"></script>

    <script type="text/javascript" src="assets/js/libs/angular/angular-route.min.js"></script>
    <script type="text/javascript" src="assets/js/libs/angular/angular-animate.min.js"></script>

    <script type="text/javascript" src="assets/js/libs/angular-ui-router/angular-ui-router.js"></script>

    <script type="text/javascript" src="assets/js/libs/angular-strap/angular-strap.js"></script>
    <script type="text/javascript" src="assets/js/libs/angular-strap/angular-strap.tpl.js"></script>
    <script type="text/javascript" src="assets/js/libs/angular-xeditable/xeditable.js"></script>

    <script type="text/javascript" src="assets/js/libs/angular/angular-sanitize.js"></script>
    <script type="text/javascript" src="assets/js/app/utils/md5.js"></script>

    <script type="text/javascript" src="assets/js/app/module.js"></script>
    <script type="text/javascript" src="assets/js/app/states/states.js"></script>

    <script type="text/javascript" src="assets/js/app/domain/todoitems.js"></script>
    <script type="text/javascript" src="assets/js/app/ui/filters.js"></script>

    <script type="text/javascript" src="assets/js/app/ui/focus.js"></script>
    <script type="text/javascript" src="assets/js/app/ui/gravatar.js"></script>
    <script type="text/javascript" src="assets/js/app/ui/editable.js"></script>
</head>
<body>

<nav class="navbar navbar-default" role="navigation">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#nav-toggle">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="/">ToDo App</a>
    </div>
    <div class="collapse navbar-collapse" id="nav-toggle">
        <ul class="nav navbar-nav">
            <li ui-sref-active="active"><a ui-sref="list">Browse</a></li>
            <li ui-sref-active="active"><a ui-sref="create">Create</a></li>
        </ul>
        <form class="navbar-form navbar-right" role="search">
            <input type="text" class="form-control" placeholder="Search" ng-model="search.description" ng-keyup="startSearch()">
        </form>
    </div>

</nav>
<div class="container">
    <div ui-view></div>
</div>

</body>
* Connection #0 to host 172.30.164.146 left intact
</html>sh-4.4$ oc delete route todo-https
sh: oc: command not found
sh-4.4$ exit
exit

Removing debug pod ...
[student@workstation network-ingress]$ oc delete route todo-https
route.route.openshift.io "todo-https" deleted
[student@workstation network-ingress]$ cd certs/
[student@workstation certs]$ ls
openssl-commands.txt  passphrase.txt  training-CA.key  training-CA.pem  training.ext
[student@workstation certs]$ openssl genrsa -out training.key 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
...........................................+++++
...........................................................+++++
e is 65537 (0x010001)
[student@workstation certs]$ openssl req -new -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/ CN=todo-https.apps.ocp4.example.com" -key training.key -out training.csr
req: Skipping unknown attribute " CN"
[student@workstation certs]$ openssl req -new -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/CN=todo-https.apps.ocp4.example.com" -key training.key -out training.csr
[student@workstation certs]$ openssl x509 -req -in training.csr -passin file:passphrase.txt -CA training-CA.pem -CAkey training-CA.key -CAcreateserial -out training.crt -days 1825 -sha256 -extfile training.ext
Signature ok
subject=C = US, ST = North Carolina, L = Raleigh, O = Red Hat, CN = todo-https.apps.ocp4.example.com
Getting CA Private Key
[student@workstation certs]$ ls -l
total 36
-rw-rw-r--. 1 student student  566 Dec  3 13:11 openssl-commands.txt
-rw-rw-r--. 1 student student   33 May 22 01:38 passphrase.txt
-rw-------. 1 student student 1751 May 22 01:38 training-CA.key
-rw-r--r--. 1 student student 1334 May 22 01:38 training-CA.pem
-rw-rw-r--. 1 student student   41 May 22 01:54 training-CA.srl
-rw-rw-r--. 1 student student 1399 May 22 01:54 training.crt
-rw-rw-r--. 1 student student 1021 May 22 01:53 training.csr
-rw-r--r--. 1 student student  352 May 22 01:38 training.ext
-rw-------. 1 student student 1675 May 22 01:52 training.key
[student@workstation certs]$ cd ~/DO280/labs/network-ingress
[student@workstation network-ingress]$ oc create secret tls todo-certs --cert certs/training.crt --key certs/training.key
secret/todo-certs created
[student@workstation network-ingress]$ oc create -f todo-app-v2.yaml
deployment.apps/todo-https created
service/todo-https created
[student@workstation network-ingress]$ oc status
In project network-ingress on server https://api.ocp4.example.com:6443

http://todo-http.apps.ocp4.example.com to pod port 8080 (svc/todo-http)
  deployment/todo-http deploys quay.io/redhattraining/todo-angular:v1.1
    deployment #1 running for 13 minutes - 1 pod

svc/todo-https - 172.30.136.3 ports 8443, 80->8080
  deployment/todo-https deploys quay.io/redhattraining/todo-angular:v1.2
    deployment #1 running for 5 seconds - 0/1 pods


2 infos identified, use 'oc status --suggest' to see details.
[student@workstation network-ingress]$ oc get pods
NAME                          READY   STATUS    RESTARTS   AGE
todo-http-59446d7885-pvvdl    1/1     Running   0          14m
todo-https-85bff5b996-r48lq   1/1     Running   0          42s
[student@workstation network-ingress]$ oc describe pod todo-https-85bff5b996-r48lq | grep Mounts -A2
    Mounts:
      /usr/local/etc/ssl/certs from tls-certs (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-j6htr (ro)
[student@workstation network-ingress]$ curl -vvI --cacert certs/training-CA.pem https://todo-https.apps.ocp4.example.com
* Rebuilt URL to: https://todo-https.apps.ocp4.example.com/
*   Trying 192.168.50.254...
* TCP_NODELAY set
* Connected to todo-https.apps.ocp4.example.com (192.168.50.254) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: certs/training-CA.pem
  CApath: none
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (OUT), TLS alert, unknown CA (560):
* SSL certificate problem: self signed certificate in certificate chain
* Closing connection 0
curl: (60) SSL certificate problem: self signed certificate in certificate chain
More details here: https://curl.haxx.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.
[student@workstation network-ingress]$ oc get svc todo-https \
> >
bash: syntax error near unexpected token `newline'
[student@workstation network-ingress]$ -o jsonpath="{.spec.clusterIP}{'\n'}"^C
[student@workstation network-ingress]$ oc get svc todo-https -o jsonpath="{.spec.clusterIP}{'\n'}"
172.30.136.3
[student@workstation network-ingress]$ oc debug -t deployment/todo-https --image registry.access.redhat.com/ubi8/ubi:8.0
Starting pod/todo-https-debug ...
Pod IP: 10.8.0.12
If you don't see a command prompt, try pressing enter.
sh-4.4$ curl -I http://172.30.121.154
curl: (7) Failed to connect to 172.30.121.154 port 80: No route to host
sh-4.4$ curl -I http://172.30.136.3  
HTTP/1.1 301 Moved Permanently
Server: nginx/1.14.1
Date: Sat, 22 May 2021 06:02:30 GMT
Content-Type: text/html
Connection: keep-alive
Location: https://172.30.136.3:8443/

sh-4.4$ curl -s -k https://172.30.121.154:8443 | head -n5
sh-4.4$ curl -s -k https://172.30.136.3:8443 | head -n5
<!DOCTYPE html>
<html lang="en" ng-app="todoItemsApp" ng-controller="appCtl">
<head>
    <meta charset="utf-8">
    <title>ToDo app</title>
sh-4.4$ exit
exit

Removing debug pod ...
[student@workstation network-ingress]$ cd
[student@workstation ~]$ oc delete project network-ingress
project.project.openshift.io "network-ingress" deleted
[student@workstation ~]$ lab network-ingress finish

Completing Guided Exercise: Controlling Cluster Network Ingress

 · Remove exercise files.......................................  SUCCESS

Please use start if you wish to do the exercise again.

[student@workstation ~]$ 

---------------------------CH-12-Configuring Network Policies---------------------
Managing Network Policies in OpenShift
Network policies allow you to configure isolation policies for individual pods. Network policies do
not require administrative privileges, giving developers more control over the applications in their
projects.
You can use network policies to create logical zones in the SDN that map to your organization
network zones. The benefit of this approach is that the location of running pods becomes
irrelevant because network policies allow you to segregate traffic regardless of where it originates.
To manage network communication between two namespaces, assign a label to the namespace
that needs access to another namespace. The following command assigns the name=network-1
label to the network-1 namespace.
[user@demo ~]$ oc label namespace network-1 name=network-1

Important
If the default Ingress Controller uses the HostNetwork endpoint publishing
strategy, then the default namespace requires the network.openshift.io/
policy-group=ingress label.
Check the endpoint publishing strategy using the oc describe command to
describe the ingresscontroller/default resource in the openshift-
ingress-controller namespace.
For more information, refer to the documentation linked below in the references.

--------------------------------------CH-12-GE-Configuring Network Policies------------------
In this exercise, you will create network policies and review pod isolation created by these
network policies.
Outcomes
You should be able to:
• Create network policies to control communication between pods.
• Verify ingress traffic is limited to pods.
[student@workstation ~]$ lab network-policy start

Checking prerequisites for Guided Exercise: Configuring Network Policies

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'network-policy' project is absent......................  SUCCESS
 · The 'network-test' project is absent........................  SUCCESS

Setting up the classroom for Guided Exercise: Configuring Network Policies

 · Validate 'admin' can log in with password 'redhat'..........  SUCCESS
 · Validate 'leader' can log in with password 'redhat'.........  SUCCESS
 · Validate 'developer' can log in with password 'developer'...  SUCCESS
 Preparing Workstation:
 · Download exercise files.....................................  SUCCESS
 · Download solution files.....................................  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ oc login -u developer -p developer https://api.ocp4.example.com:6443
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc new-project network-policy
Now using project "network-policy" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc new-app --name hello --docker-image quay.io/redhattraining/hello-world-nginx:v1.0
--> Found container image 44eaa13 (23 months old) from quay.io for "quay.io/redhattraining/hello-world-nginx:v1.0"

    Red Hat Universal Base Image 8 
    ------------------------------ 
    The Universal Base Image is designed and engineered to be the base layer for all of your containerized applications, middleware and utilities. This base image is freely redistributable, but Red Hat only supports Red Hat technologies through subscriptions for Red Hat products. This image is maintained by Red Hat and updated regularly.

    Tags: base rhel8

    * An image stream tag will be created as "hello:v1.0" that will track this image

--> Creating resources ...
    imagestream.image.openshift.io "hello" created
    deployment.apps "hello" created
    service "hello" created
--> Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/hello' 
    Run 'oc status' to view your app.
[student@workstation ~]$ oc status
In project network-policy on server https://api.ocp4.example.com:6443

svc/hello - 172.30.5.180:8080
  deployment/hello deploys istag/hello:v1.0 
    deployment #2 running for 4 seconds - 0/1 pods
    deployment #1 deployed 5 seconds ago - 0/1 pods growing to 1


1 info identified, use 'oc status --suggest' to see details.
[student@workstation ~]$ oc get all
NAME                         READY   STATUS              RESTARTS   AGE
pod/hello-6c4984d949-mrlvr   0/1     ContainerCreating   0          10s

NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
service/hello   ClusterIP   172.30.5.180   <none>        8080/TCP   11s

NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/hello   0/1     1            0           11s

NAME                               DESIRED   CURRENT   READY   AGE
replicaset.apps/hello-546fb597f8   1         0         0       11s
replicaset.apps/hello-6c4984d949   1         1         0       10s

NAME                                   IMAGE REPOSITORY                                                        TAGS   UPDATED
imagestream.image.openshift.io/hello   image-registry.openshift-image-registry.svc:5000/network-policy/hello   v1.0   10 seconds ago
[student@workstation ~]$ oc new-app --name test --docker-image quay.io/redhattraining/hello-world-nginx:v1.0
--> Found container image 44eaa13 (23 months old) from quay.io for "quay.io/redhattraining/hello-world-nginx:v1.0"

    Red Hat Universal Base Image 8 
    ------------------------------ 
    The Universal Base Image is designed and engineered to be the base layer for all of your containerized applications, middleware and utilities. This base image is freely redistributable, but Red Hat only supports Red Hat technologies through subscriptions for Red Hat products. This image is maintained by Red Hat and updated regularly.

    Tags: base rhel8

    * An image stream tag will be created as "test:v1.0" that will track this image

--> Creating resources ...
    imagestream.image.openshift.io "test" created
    deployment.apps "test" created
    service "test" created
--> Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/test' 
    Run 'oc status' to view your app.
[student@workstation ~]$ oc expose service hello
route.route.openshift.io/hello exposed
[student@workstation ~]$ ~/DO280/labs/network-policy/display-project-info.sh
===================================================================
PROJECT: network-policy

POD NAME                 IP ADDRESS
hello-6c4984d949-mrlvr   10.10.0.36
test-c4d74c9d5-9dqlr     10.10.0.37

SERVICE NAME   CLUSTER-IP
hello          172.30.5.180
test           172.30.245.80

ROUTE NAME   HOSTNAME                                     PORT
hello        hello-network-policy.apps.ocp4.example.com   8080-tcp

===================================================================
[student@workstation ~]$ oc rsh test-c4d74c9d5-9dqlr curl 10.10.0.36 | grep Hello
command terminated with exit code 7
[student@workstation ~]$ oc rsh test-c4d74c9d5-9dqlr curl 10.10.0.36:8080 | grep Hello
    <h1>Hello, world from nginx!</h1>
[student@workstation ~]$ oc rsh test-c4d74c9d5-9dqlr curl 172.30.5.180:8080 | grep Hello
    <h1>Hello, world from nginx!</h1>
[student@workstation ~]$ curl -s hello-network-policy.apps.ocp4.example.com | grep Hello
    <h1>Hello, world from nginx!</h1>
[student@workstation ~]$ oc new-project network-test
Now using project "network-test" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc new-app --name sample-app --docker-image quay.io/redhattraining/hello-world-nginx:v1.0
--> Found container image 44eaa13 (23 months old) from quay.io for "quay.io/redhattraining/hello-world-nginx:v1.0"

    Red Hat Universal Base Image 8 
    ------------------------------ 
    The Universal Base Image is designed and engineered to be the base layer for all of your containerized applications, middleware and utilities. This base image is freely redistributable, but Red Hat only supports Red Hat technologies through subscriptions for Red Hat products. This image is maintained by Red Hat and updated regularly.

    Tags: base rhel8

    * An image stream tag will be created as "sample-app:v1.0" that will track this image

--> Creating resources ...
    imagestream.image.openshift.io "sample-app" created
    deployment.apps "sample-app" created
    service "sample-app" created
--> Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/sample-app' 
    Run 'oc status' to view your app.
[student@workstation ~]$ ~/DO280/labs/network-policy/display-project-info.sh
===================================================================
PROJECT: network-policy

POD NAME                 IP ADDRESS
hello-6c4984d949-mrlvr   10.10.0.36
test-c4d74c9d5-9dqlr     10.10.0.37

SERVICE NAME   CLUSTER-IP
hello          172.30.5.180
test           172.30.245.80

ROUTE NAME   HOSTNAME                                     PORT
hello        hello-network-policy.apps.ocp4.example.com   8080-tcp

===================================================================
PROJECT: network-test

POD NAME
sample-app-d5f945-5wj29

===================================================================
[student@workstation ~]$ oc rsh sample-app-d5f945-5wj29 curl 10.10.0.36:8080 | grep Hello
    <h1>Hello, world from nginx!</h1>
[student@workstation ~]$ oc project network-policy
Now using project "network-policy" on server "https://api.ocp4.example.com:6443".
[student@workstation ~]$ cd ~/DO280/labs/network-policy/
[student@workstation network-policy]$ vi deny-all.yaml 
[student@workstation network-policy]$ oc create -f deny-all.yaml
networkpolicy.networking.k8s.io/deny-all created
[student@workstation network-policy]$ curl -s hello-network-policy.apps.ocp4.example.com | grep Hello
^C
[student@workstation network-policy]$ oc rsh test-c4d74c9d5-9dqlr curl 10.10.0.36:8080 | grep Hello
command terminated with exit code 130
[student@workstation network-policy]$ oc project network-test
Now using project "network-test" on server "https://api.ocp4.example.com:6443".
[student@workstation network-policy]$ oc rsh sample-app-d5f945-5wj29 curl 10.10.0.36:8080 | grep Hello
command terminated with exit code 130
[student@workstation network-policy]$ vi allow-specific.yaml 
[student@workstation network-policy]$ at allow-specific.yaml 
syntax error. Last token seen: a
Garbled time
[student@workstation network-policy]$ cat allow-specific.yaml 
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-specific
spec:
  podSelector:
    matchLabels:
      deployment: hello
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: network-test
        podSelector:
          matchLabels:
            deployment: sample-app
      ports:
      - port: 8080
        protocol: TCP
[student@workstation network-policy]$ oc create -n network-policy -f allow-specific.yaml 
networkpolicy.networking.k8s.io/allow-specific created
[student@workstation network-policy]$ oc get networkpolicies -n network-policy
NAME             POD-SELECTOR       AGE
allow-specific   deployment=hello   12s
deny-all         <none>             5m5s
[student@workstation network-policy]$ oc login -u admin -p redhat
Login successful.

You have access to 61 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "network-test".
[student@workstation network-policy]$ oc label namespace network-test name=network-test
namespace/network-test labeled
[student@workstation network-policy]$ oc rsh sample-app-d5f945-5wj29 curl 10.10.0.36:8080 | grep Hello
    <h1>Hello, world from nginx!</h1>
[student@workstation network-policy]$ oc rsh sample-app-d5f945-5wj29 curl 10.10.0.36:8181 | grep Hello
command terminated with exit code 130
[student@workstation network-policy]$ oc rsh sample-app-d5f945-5wj29 curl 10.10.0.37:8181 | grep Hello
command terminated with exit code 130
[student@workstation network-policy]$ vim ~/DO280/solutions/network-policy/allow-from-openshift-ingress.yaml
[student@workstation network-policy]$ oc create -n network-policy -f allow-from-openshift-ingress.yam
error: the path "allow-from-openshift-ingress.yam" does not exist
[student@workstation network-policy]$ oc create -n network-policy -f allow-from-openshift-ingress.yaml
Error from server (BadRequest): error when creating "allow-from-openshift-ingress.yaml": NetworkPolicy in version "v1" cannot be handled as a NetworkPolicy: v1.NetworkPolicy.Spec: v1.NetworkPolicySpec.Ingress: []v1.NetworkPolicyIngressRule: v1.NetworkPolicyIngressRule.From: []v1.NetworkPolicyPeer: v1.NetworkPolicyPeer.NamespaceSelector: v1.LabelSelector.MatchLabels: ReadMapCB: expect { or n, but found ", error found in #10 byte of ...|hLabels":"CHANGE_ME"|..., bigger context ...|s":[{"from":[{"namespaceSelector":{"matchLabels":"CHANGE_ME"}}]}],"podSelector":"CHANGE_ME"}}
|...
[student@workstation network-policy]$ vim ~/DO280/solutions/network-policy/allow-from-openshift-ingress.yaml
[student@workstation network-policy]$ vi ~/DO280/solutions/network-policy/allow-from-openshift-ingress.yaml
[student@workstation network-policy]$ pwd
/home/student/DO280/labs/network-policy
[student@workstation network-policy]$ vi allow-from-openshift-ingress.yaml 
[student@workstation network-policy]$ oc create -n network-policy -f allow-from-openshift-ingress.yaml
networkpolicy.networking.k8s.io/allow-from-openshift-ingress created
[student@workstation network-policy]$ oc get networkpolicies -n network-policy
NAME                           POD-SELECTOR       AGE
allow-from-openshift-ingress   <none>             16s
allow-specific                 deployment=hello   7m36s
deny-all                       <none>             12m
[student@workstation network-policy]$ oc login -u admin -p redhat
Login successful.

You have access to 61 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "network-test".
[student@workstation network-policy]$ oc label namespace default network.openshift.io/policy-group=ingress
namespace/default labeled
[student@workstation network-policy]$ curl -s hello-network-policy.apps.ocp4.example.com | grep Hello
[student@workstation network-policy]$ curl -s hello-network-policy.apps.ocp4.example.com | grep Hello
[student@workstation network-policy]$ cd
[student@workstation ~]$ lab network-policy finish

Completing Guided Exercise: Configuring Network Policies

 · Delete OpenShift project 'network-policy'...................  SUCCESS
 · Wait for project 'network-policy' to be gone................  SUCCESS
 · Delete OpenShift project 'network-test'.....................  SUCCESS
 · Wait for project 'network-test' to be gone..................  SUCCESS
 · Remove network.openshift.io/policy-group=ingress label from 
   the default project.........................................  SUCCESS
 · Remove exercise files.......................................  SUCCESS
 · Remove solution files.......................................  SUCCESS

Please use start if you wish to do the exercise again.

[student@workstation ~]$ 

------------------------------Ch-12-Lab-Configuring OpenShift Networking for Applications------------------------------------
In this lab, you will configure a TLS passthrough route for your application.
Outcomes
You should be able to:
• Deploy an application and configure an insecure route.
• Restrict traffic to the applications.
• Generate a TLS certificate for an application.
• Configure a passthrough route for an application with a TLS certificate.

[student@workstation ~]$ lab network-review start

Checking prerequisites for Lab: Configuring OpenShift Networking for Applications

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'network-review' project is absent......................  SUCCESS

Setting up the classroom for Lab: Configuring OpenShift Networking for Applications

 · Validate 'admin' can log in with password 'redhat'..........  SUCCESS
 · Validate 'leader' can log in with password 'redhat'.........  SUCCESS
 · Validate 'developer' can log in with password 'developer'...  SUCCESS
 Preparing Workstation:
 · Download exercise files.....................................  SUCCESS
 · Download solution files.....................................  SUCCESS
 Configuring Certificates:
 · Generating unique CA key password...........................  SUCCESS
 · Setting environment variable in cert. configuration file....  SUCCESS
 · Generating the CA key.......................................  SUCCESS
 · Generating CA certificate...................................  SUCCESS
 · Creating private key........................................  SUCCESS
 · Updating privileges on certs directory......................  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ oc login -u developer -p developer https://api.ocp4.example.com:6443
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc new-project network-review
Now using project "network-review" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ cd ~/DO280/labs/network-review/
[student@workstation network-review]$ cat php-http.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-http
  labels:
    app: php-http
    name: php-http
  namespace: network-review
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php-http
      name: php-http
  template:
    metadata:
      labels:
        app: php-http
        name: php-http
    spec:
      containers:
      - resources:
          limits:
            memory: "128Mi"
            cpu: '0.5'
        image: 'quay.io/redhattraining/php-ssl:v1.0'
        name: php-http
        ports:
        - containerPort: 8080
          name: php-http
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: php-http
    name: php-http
  name: php-http
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    name: php-http[student@workstation network-review]$ oc create -f php-http.yaml
deployment.apps/php-http created
service/php-http created
[student@workstation network-review]$ oc get all
NAME                            READY   STATUS    RESTARTS   AGE
pod/php-http-7585bf95c9-m8hqt   1/1     Running   0          6s

NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
service/php-http   ClusterIP   172.30.189.170   <none>        80/TCP    6s

NAME                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/php-http   1/1     1            1           6s

NAME                                  DESIRED   CURRENT   READY   AGE
replicaset.apps/php-http-7585bf95c9   1         1         1       6s
[student@workstation network-review]$ oc get pods
NAME                        READY   STATUS    RESTARTS   AGE
php-http-7585bf95c9-m8hqt   1/1     Running   0          16s
[student@workstation network-review]$ oc expose svc php-http --hostname php-http.apps.ocp4.example.com
route.route.openshift.io/php-http exposed
[student@workstation network-review]$ oc get routes
NAME       HOST/PORT                        PATH   SERVICES   PORT   TERMINATION   WILDCARD
php-http   php-http.apps.ocp4.example.com          php-http   8080                 None
[student@workstation network-review]$ vi deny-all.yaml 
[student@workstation network-review]$ cat deny-all.yaml 
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: deny-all
spec:
  podSelector: {}      
[student@workstation network-review]$ oc create -f deny-all.yaml
networkpolicy.networking.k8s.io/deny-all created
[student@workstation network-review]$ curl http://php-http.apps.ocp4.example.com
^C
[student@workstation network-review]$  cp ../../solutions/network-review/allow-from-openshift-ingress.yaml 
cp: missing destination file operand after '../../solutions/network-review/allow-from-openshift-ingress.yaml'
Try 'cp --help' for more information.
[student@workstation network-review]$  cp ../../solutions/network-review/allow-from-openshift-ingress.yaml  .
[student@workstation network-review]$ cat allow-from-openshift-ingress.yaml 
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-from-openshift-ingress
spec:
  podSelector: {}
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          network.openshift.io/policy-group: ingress
[student@workstation network-review]$ oc create -f allow-from-openshift-ingress.yaml 
networkpolicy.networking.k8s.io/allow-from-openshift-ingress created
[student@workstation network-review]$ oc login -u admin -p redhat
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "network-review".
[student@workstation network-review]$ oc label namespace default network.openshift.io/policy-group=ingress
namespace/default labeled
[student@workstation network-review]$ for X in {1..4}; do curl -s http://php-http.apps.ocp4.example.com | grep "PHP";done
    <title>PHP Application</title>
    <title>PHP Application</title>
    <title>PHP Application</title>
    <title>PHP Application</title>
[student@workstation network-review]$ oc login -u developer -p developer
Login successful.

You have one project on this server: "network-review"

Using project "network-review".
[student@workstation network-review]$ cd certs/
[student@workstation certs]$ ls
openssl-commands.txt  passphrase.txt  training-CA.key  training-CA.pem  training.ext  training.key
[student@workstation certs]$ openssl req -new -key training.key -subj "/C=US/ST=North Carolina/L=Raleigh/O=Red Hat/CN=php-https.apps.ocp4.example.com" -out training.csr
[student@workstation certs]$ openssl x509 -req -in training.csr -CA training-CA.pem -CAkey training-CA.key -CAcreateserial -passin file:passphrase.txt -out training.crt -days 3650 -sha256 -extfile training.ext
Signature ok
subject=C = US, ST = North Carolina, L = Raleigh, O = Red Hat, CN = php-https.apps.ocp4.example.com
Getting CA Private Key
[student@workstation certs]$ ls -l
total 36
-rw-rw-r--. 1 student student  566 Dec  3 13:11 openssl-commands.txt
-rw-rw-r--. 1 student student   33 May 22 23:34 passphrase.txt
-rw-------. 1 student student 1751 May 22 23:34 training-CA.key
-rw-r--r--. 1 student student 1334 May 22 23:34 training-CA.pem
-rw-rw-r--. 1 student student   41 May 22 23:57 training-CA.srl
-rw-rw-r--. 1 student student 1395 May 22 23:57 training.crt
-rw-rw-r--. 1 student student 1021 May 22 23:56 training.csr
-rw-r--r--. 1 student student  352 May 22 23:34 training.ext
-rw-------. 1 student student 1679 May 22 23:34 training.key
[student@workstation certs]$ cd ~/DO280/labs/network-review
[student@workstation network-review]$ oc create secret tls php-certs --cert certs/training.crt --key certs/training.key
secret/php-certs created
[student@workstation network-review]$ oc get secrets
NAME                       TYPE                                  DATA   AGE
builder-dockercfg-qxcdb    kubernetes.io/dockercfg               1      23m
builder-token-4lfvv        kubernetes.io/service-account-token   4      23m
builder-token-6l599        kubernetes.io/service-account-token   4      23m
default-dockercfg-rpwdz    kubernetes.io/dockercfg               1      23m
default-token-c9jl2        kubernetes.io/service-account-token   4      23m
default-token-vl9g9        kubernetes.io/service-account-token   4      23m
deployer-dockercfg-8fqpc   kubernetes.io/dockercfg               1      23m
deployer-token-8kc68       kubernetes.io/service-account-token   4      23m
deployer-token-rzj6h       kubernetes.io/service-account-token   4      23m
php-certs                  kubernetes.io/tls                     2      10s
[student@workstation network-review]$ cp ../../solutions/network-review/php-https.yaml .
[student@workstation network-review]$ cat php-https.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-https
  labels:
    app: php-https
    name: php-https
  namespace: network-review
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php-https
      name: php-https
  template:
    metadata:
      labels:
        app: php-https
        name: php-https
    spec:
      containers:
      - resources:
          limits:
            memory: "128Mi"
            cpu: '0.5'
        image: 'quay.io/redhattraining/php-ssl:v1.1'
        name: php-https
        ports:
        - containerPort: 8443
          name: php-https
        volumeMounts:
        - name: tls-certs
          readOnly: true
          mountPath: /usr/local/etc/ssl/certs
      volumes:
      - name: tls-certs
        secret:
          secretName: php-certs
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: php-https
    name: php-https
  name: php-https
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    name: php-https[student@workstation network-review]$ oc create -f php-https.yaml
deployment.apps/php-https created
service/php-https created
[student@workstation network-review]$ oc get pods
NAME                         READY   STATUS    RESTARTS   AGE
php-http-7585bf95c9-m8hqt    1/1     Running   0          9m35s
php-https-5df75876c5-2t2h8   1/1     Running   0          11s
[student@workstation network-review]$ oc create route passthrough php-https --service php-https --port 8443 --hostname php-https.apps.ocp4.example.com
route.route.openshift.io/php-https created
[student@workstation network-review]$ oc get routes
NAME        HOST/PORT                         PATH   SERVICES    PORT   TERMINATION   WILDCARD
php-http    php-http.apps.ocp4.example.com           php-http    8080                 None
php-https   php-https.apps.ocp4.example.com          php-https   8443   passthrough   None
[student@workstation network-review]$ curl -v --cacert certs/training-CA.pem https://php-https.apps.ocp4.example.com
* Rebuilt URL to: https://php-https.apps.ocp4.example.com/
*   Trying 192.168.50.254...
* TCP_NODELAY set
* Connected to php-https.apps.ocp4.example.com (192.168.50.254) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: certs/training-CA.pem
  CApath: none
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Certificate (11):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, CERT verify (15):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Finished (20):
* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.3 (OUT), TLS handshake, [no content] (0):
* TLSv1.3 (OUT), TLS handshake, Finished (20):
* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384
* ALPN, server accepted to use http/1.1
* Server certificate:
*  subject: C=US; ST=North Carolina; L=Raleigh; O=Red Hat; CN=php-https.apps.ocp4.example.com
*  start date: May 23 03:57:08 2021 GMT
*  expire date: May 21 03:57:08 2031 GMT
*  subjectAltName: host "php-https.apps.ocp4.example.com" matched cert's "*.apps.ocp4.example.com"
*  issuer: C=US; ST=North Carolina; L=Raleigh; O=Red Hat; CN=ocp4.example.com
*  SSL certificate verify ok.
* TLSv1.3 (OUT), TLS app data, [no content] (0):
> GET / HTTP/1.1
> Host: php-https.apps.ocp4.example.com
> User-Agent: curl/7.61.1
> Accept: */*
> 
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* TLSv1.3 (IN), TLS handshake, [no content] (0):
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* TLSv1.3 (IN), TLS app data, [no content] (0):
< HTTP/1.1 200 OK
< Date: Sun, 23 May 2021 04:01:05 GMT
< Server: Apache/2.4.37 (Red Hat Enterprise Linux) OpenSSL/1.1.1
< X-Powered-By: PHP/7.2.11
< Transfer-Encoding: chunked
< Content-Type: text/html; charset=UTF-8
< 

<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <title>PHP Application</title>
  </head>
  <body>
    <h2><strong>About this application</strong></h2>
            <i class="fa fa-lock"/><span style="color: #339966;"><strong>
          The application is currently served over TLS        </span></strong>
          <ul>
      <li>
        <strong>Current system load:</strong> 287.5      </li>
      <li>
        <strong>Number of connections:</strong> 0      </li>
      <li>
        <strong>Memory usage:</strong> 56 Mb      </li>
    </ul>
  </body>
* Connection #0 to host php-https.apps.ocp4.example.com left intact
</html>[student@workstation network-review]$ cd
[student@workstation ~]$ lab network-review grade

Grading the student's work for Lab: Configuring OpenShift Networking for Applications

 · network-review is present...................................  PASS
 · php-http deployment is present..............................  PASS
 · php-http deployment points to v1.0 of the application.......  PASS
 · php-http deployment uses port 8080..........................  PASS
 · php-http container is running...............................  PASS
 · Route for php-http is present...............................  PASS
 · Route for php-http is accessible............................  PASS
 · SSL certificate is present..................................  PASS
 · SSL certificate matches required CN.........................  PASS
 · TLS secret is present.......................................  PASS
 · php-https deployment is present.............................  PASS
 · php-https deployment points to v1.1 of the application......  PASS
 · php-https deployment uses port 8443.........................  PASS
 · php-https container is running..............................  PASS
 · Route for php-https is present..............................  PASS
 · Route for php-https is accessible using TLS CA..............  PASS
 · Network policy denies pod to pod traffic....................  PASS
 · Default namespace is labeled with network.openshift.io/polic
   y-group=ingress.............................................  PASS

Overall exercise grade.........................................  PASS

[student@workstation ~]$ 
