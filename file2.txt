
--------------------------------------CH10-GE-Configuring Identity Providers--------------------------------
In this exercise, you will configure the HTPasswd identity provider and create users for cluster
administrators.
Outcomes
You should be able to:
 Create users and passwords for HTPasswd authentication.
  Configure the Identity Provider for HTPasswd authentication.
   Assign cluster administration rights to users.
   
[student@workstation ~]$ lab auth-provider start

Checking prerequisites for Guided Exercise: Configuring Identity Providers

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'auth-provider' project is absent.......................  SUCCESS

Setting up the classroom for Guided Exercise: Configuring Identity Providers

 Preparing the student's workstation:
 · Download exercise files.....................................  SUCCESS
 · Download solution files.....................................  SUCCESS
 Restoring authentication settings to installation defaults:
 · No need to perform any change...............................  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ source /usr/local/etc/ocp4.config
[student@workstation ~]$ htpasswd -c -B -b ~/DO280/labs/auth-provider/htpasswd admin redhat
Adding password for user admin
[student@workstation ~]$ htpasswd -b ~/DO280/labs/auth-provider/htpasswd developer developer
Adding password for user developer
[student@workstation ~]$ cat ~/DO280/labs/auth-provider/htpasswd
admin:$2y$05$xEETU3573YrbGmznTMMBZOSrgcSUpXX5WBqivpRVKDF6MUMO0qSs2
developer:$apr1$fwuleoSK$fijQ.FKM0XsUwedL9EAQ60
[student@workstation ~]$ oc login -u kubeadmin -p ${RHT_OCP4_KUBEADM_PASSWD} https://api.ocp4.example.com:6443
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc create secret generic localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers created
[student@workstation ~]$ oc adm policy add-cluster-role-to-user cluster-admin admin
Warning: User 'admin' not found
clusterrole.rbac.authorization.k8s.io/cluster-admin added: "admin"
[student@workstation ~]$ oc get oauth cluster -o yaml > ~/DO280/labs/auth-provider/oauth.yaml
[student@workstation ~]$ vim ~/DO280/labs/auth-provider/oauth.yaml
[student@workstation ~]$ cat !$
cat ~/DO280/labs/auth-provider/oauth.yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"config.openshift.io/v1","kind":"OAuth","metadata":{"annotations":{},"name":"cluster"},"spec":{"identityProviders":[{"challenge":true,"htpasswd":{"fileData":{"name":"localusers"}},"login":true,"mappingMethod":"claim","name":"localusers","type":"HTPasswd"}]}}
    release.openshift.io/create-only: "true"
  creationTimestamp: "2020-08-05T18:23:41Z"
  generation: 3
  managedFields:
  - apiVersion: config.openshift.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:release.openshift.io/create-only: {}
      f:spec: {}
    manager: cluster-version-operator
    operation: Update
    time: "2020-08-05T18:23:41Z"
  - apiVersion: config.openshift.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:kubectl.kubernetes.io/last-applied-configuration: {}
    manager: oc
    operation: Update
    time: "2020-11-23T15:53:12Z"
  name: cluster
  resourceVersion: "82447"
  selfLink: /apis/config.openshift.io/v1/oauths/cluster
  uid: c96a18f6-b8de-4722-b5bf-ca6c39cdb78b
spec:
  identityProviders:
  - htpasswd:
      fileData:
        name: localusers
    mappingMethod: claim
    name: myusers
    type: HTPasswd
[student@workstation ~]$ oc replace -f ~/DO280/labs/auth-provider/oauth.yaml
oauth.config.openshift.io/cluster replaced
[student@workstation ~]$ 

Note
Pods in the openshift-authentication namespace will redeploy if the oc
replace command succeeds. Provided the previously created secret was created
correctly, you can log in using the HTPasswd identity provider

[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc get nodes
NAME       STATUS   ROLES           AGE    VERSION
master01   Ready    master,worker   285d   v1.18.3+012b3ec
master02   Ready    master,worker   285d   v1.18.3+012b3ec
master03   Ready    master,worker   285d   v1.18.3+012b3ec
[student@workstation ~]$ oc login -u developer -p developer
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc get nodes
Error from server (Forbidden): nodes is forbidden: User "developer" cannot list resource "nodes" in API group "" at the cluster scope
[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc get users
NAME        UID                                    FULL NAME   IDENTITIES
admin       045f3fb1-f02d-4f88-ab7a-2539592f1919               myusers:admin
developer   52cef92c-cec5-422f-94dd-e98988ee7c59               myusers:developer
[student@workstation ~]$ oc get identity
NAME                IDP NAME   IDP USER NAME   USER NAME   USER UID
myusers:admin       myusers    admin           admin       045f3fb1-f02d-4f88-ab7a-2539592f1919
myusers:developer   myusers    developer       developer   52cef92c-cec5-422f-94dd-e98988ee7c59
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to ~/DO280/labs/auth-provider/ --confirm
/home/student/DO280/labs/auth-provider/htpasswd
[student@workstation ~]$ htpasswd -b ~/DO280/labs/auth-provider/htpasswd manager redhat
Adding password for user manager
[student@workstation ~]$ cat ~/DO280/labs/auth-provider/htpasswd
admin:$2y$05$xEETU3573YrbGmznTMMBZOSrgcSUpXX5WBqivpRVKDF6MUMO0qSs2
developer:$apr1$fwuleoSK$fijQ.FKM0XsUwedL9EAQ60
manager:$apr1$Zre8tjch$LNpG6KYCg69FtKQok3bKW0
[student@workstation ~]$ oc set data secret/localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers data updated
[student@workstation ~]$ oc login -u manager -p redhat
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc new-project auth-provider
Now using project "auth-provider" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc login -u developer -p developer
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc delete project auth-provider
Error from server (Forbidden): projects.project.openshift.io "auth-provider" is forbidden: User "developer" cannot delete resource "projects" in API group "project.openshift.io" in the namespace "auth-provider"

[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to ~/DO280/labs/auth-provider/ --confirm
/home/student/DO280/labs/auth-provider/htpasswd
[student@workstation ~]$ MANAGER_PASSWD="$(openssl rand -hex 15)"
[student@workstation ~]$ htpasswd -b ~/DO280/labs/auth-provider/htpasswd manager ${MANAGER_PASSWD}
Updating password for user manager
[student@workstation ~]$ oc set data secret/localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers data updated
[student@workstation ~]$ oc login -u manager -p ${MANAGER_PASSWD}
Login successful.

You have one project on this server: "auth-provider"

Using project "auth-provider".
[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "auth-provider".
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to ~/DO280/labs/auth-provider/ --confirm
/home/student/DO280/labs/auth-provider/htpasswd
[student@workstation ~]$ htpasswd -D ~/DO280/labs/auth-provider/htpasswd manager
Deleting password for user manager
[student@workstation ~]$ oc set data secret/localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers data updated
[student@workstation ~]$ oc delete identity "myusers:manager"
identity.user.openshift.io "myusers:manager" deleted
[student@workstation ~]$ oc delete user manager
user.user.openshift.io "manager" deleted
[student@workstation ~]$ oc login -u manager -p ${MANAGER_PASSWD}
Login failed (401 Unauthorized)
Verify you have provided correct credentials.
[student@workstation ~]$ oc get users
NAME        UID                                    FULL NAME   IDENTITIES
admin       045f3fb1-f02d-4f88-ab7a-2539592f1919               myusers:admin
developer   52cef92c-cec5-422f-94dd-e98988ee7c59               myusers:developer
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to -
# htpasswd
admin:$2y$05$xEETU3573YrbGmznTMMBZOSrgcSUpXX5WBqivpRVKDF6MUMO0qSs2
developer:$apr1$fwuleoSK$fijQ.FKM0XsUwedL9EAQ60
[student@workstation ~]$ oc login -u kubeadmin -p ${RHT_OCP4_KUBEADM_PASSWD}
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "auth-provider".
[student@workstation ~]$ oc delete project auth-provider
project.project.openshift.io "auth-provider" deleted
[student@workstation ~]$ oc edit oauth
oauth.config.openshift.io/cluster edited
[student@workstation ~]$

Delete all the lines under spec:, and then append {} after spec:. Leave all the
other information in the file unchanged. Your spec: line should match the following:
...output omitted...
spec: {}

[student@workstation ~]$ oc delete secret localusers -n openshift-config
secret "localusers" deleted
[student@workstation ~]$ oc delete user --all
user.user.openshift.io "admin" deleted
user.user.openshift.io "developer" deleted
[student@workstation ~]$ oc delete identity --all
identity.user.openshift.io "myusers:admin" deleted
identity.user.openshift.io "myusers:developer" deleted
[student@workstation ~]$ lab auth-provider finish

Completing Guided Exercise: Configuring Identity Providers

 · Remove exercise files.......................................  SUCCESS
 · Remove solution files.......................................  SUCCESS

Please use start if you wish to do the exercise again.

[student@workstation ~]$ 
------------------CH10-Defining and Applying Permissions Using RBAC-----------------------------------------------
Role-based Access Control (RBAC)
Role-based access control (RBAC) is a technique for managing access to resources in a computer
system. In Red Hat OpenShift, RBAC determines if a user can perform certain actions within the
cluster or project. There are two types of roles that can be used depending on the user's level of
responsibility: cluster and local.
Note
Authorization is a separate step from authentication.

Authorization Process
RBAC Object        Description
Rule              Allowed actions for objects or groups of objects.
Role              Sets of rules. Users and groups can be associated with multiple roles.
Binding           Assignment of users or groups to a role.

RBAC Scope
Role Level        Description
Cluster Role      Users or groups with this role level can manage the OpenShift cluster.
Local Role        Users or groups with this role level can only manage elements at a project level.

Note
Cluster role bindings take precedence over local role bindings.

Managing RBAC Using the CLI
Cluster administrators can use the oc adm policy command to both add and remove cluster
roles and namespace roles.

To add a cluster role to a user, use the add-cluster-role-to-user subcommand:

[user@demo ~]$ oc adm policy add-cluster-role-to-user cluster-role username

For example, to change a regular user to a cluster administrator, use the following command:
[user@demo ~]$ oc adm policy add-cluster-role-to-user cluster-admin username

To remove a cluster role from a user, use the remove-cluster-role-from-user
subcommand:
[user@demo ~]$ oc adm policy remove-cluster-role-from-user cluster-role username

For example, to change a cluster administrator to a regular user, use the following command:
[user@demo ~]$ oc adm policy remove-cluster-role-from-user cluster-admin username

Rules are defined by an action and a resource. For example, the create user rule is part of the
cluster-admin role.
You can use the oc adm policy who-can command to determine if a user can execute an
action on a resource. For example:
[user@demo ~]$ oc adm policy who-can delete user

Default roles   Description
admin           Users with this role can manage all project resources,including granting access to other users to access the project.
basic-user      Users with this role have read access to the project.

cluster-        Users with this role have superuser access to the cluster resources. These users can perform any action on the c       admin           custer and have full control of all projects.

cluster-        Users with this role can get cluster status information.
status

edit            Users with this role can create, change, and delete common application resources from the project, such as services                   and deployment configurations. These users cannot act on management resources such
                as limit ranges and quotas, and cannot manage access permissions to the project.
                
self-           Users with this role can create new projects. This is a cluster role, not a
provisioner      project role.

view              Users with this role can view project resources, but cannot modify project resources.

The admin role gives a user access to project resources such as quotas and limit ranges, and
also the ability to create new applications. The edit role gives a user sufficient access to act
as a developer inside the project, but working under the constraints configured by a project
administrator.
Project administrators can use the oc policy command to add and remove namespace roles.

Add a specified role to a user with the add-role-to-user subcommand. For example:
[user@demo ~]$ oc policy add-role-to-user role-name username -n project

For example, to add the user dev to the role basic-user in the wordpress project:
[user@demo ~]$ oc policy add-role-to-user basic-user dev -n wordpress

User Types
Interaction with OpenShift Container Platform is associated with a user. An OpenShift Container
Platform user object represents a user who can be granted permissions in the system by adding
roles to that user or to a user's group via rolebindings.

Regular users
This is the way most interactive OpenShift Container Platform users are represented. Regular
users are represented with the User object. This type of user represents a person that has
been allowed access to the platform. Examples of regular users include user1 and user2.

System users
Many of these are created automatically when the infrastructure is defined, mainly for
the purpose of enabling the infrastructure to securely interact with the API. System users
include a cluster administrator (with access to everything), a per-node user, users for
routers and registries to use, and various others. An anonymous system user is used by
default for unauthenticated requests. Examples of system users include: system:admin,
system:openshift-registry, and system:node:node1.example.com.

Service accounts
These are special system users associated with projects; some are created automatically
when the project is first created, and project administrators can create more for the
purpose of defining access to the contents of each project. Service accounts are
often used to give extra privileges to pods or deployment configurations. Service
accounts are represented with the ServiceAccount object. Examples of service
ccount users include system:serviceaccount:default:deployer and

system:serviceaccount:foo:builder.

Every user must authenticate before they can access OpenShift Container Platform. API requests
with no authentication or invalid authentication are authenticated as requests by the anonymous
system user. After successful authentication, policy determines what the user is authorized to do.

----------------------CH-10-GE-Defining and Applying Permissions using RBAC -------------------------------
In this exercise, you will define role-based access controls and apply permissions to users.
Outcomes
You should be able to:
• Remove project creation privileges from users who are not OpenShift cluster
administrators.
• Create OpenShift groups and add members to these groups.
• Create a project and assign project administration privileges to the project.
• As a project administrator, assign read and write privileges to different groups of users.

[student@workstation ~]$ lab auth-rbac start

Checking prerequisites for Guided Exercise: Defining and Applying permissions using RBAC

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'auth-rbac' project is absent...........................  SUCCESS

Setting up the classroom for Guided Exercise: Defining and Applying permissions using RBAC

 · Validate 'admin' can log in with password 'redhat'..........  SUCCESS
 · Validate 'leader' can log in with password 'redhat'.........  SUCCESS
 · Validate 'developer' can log in with password 'developer'...  SUCCESS
 · Validate 'qa-engineer' can log in with password 'redhat'....  SUCCESS
 · Restore project creation privileges.........................  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ oc login -u admin -p redhat https://api.ocp4.example.com:6443
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc get clusterrolebinding -o wide | grep -E 'NAME|self-provisioner'
NAME                                                                             ROLE                                                                               AGE     USERS                                   GROUPS                                         SERVICEACCOUNTS
self-provisioners                                                                ClusterRole/self-provisioner                                                       25s                                             system:authenticated:oauth                     
[student@workstation ~]$ oc describe clusterrolebindings self-provisioners
Name:         self-provisioners
Labels:       <none>
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
Role:
  Kind:  ClusterRole
  Name:  self-provisioner
Subjects:
  Kind   Name                        Namespace
  ----   ----                        ---------
  Group  system:authenticated:oauth  
[student@workstation ~]$ oc adm policy remove-cluster-role-from-group self-provisioner system:authenticated:oauth
Warning: Your changes may get lost whenever a master is restarted, unless you prevent reconciliation of this rolebinding using the following command: oc annotate clusterrolebinding.rbac self-provisioners 'rbac.authorization.kubernetes.io/autoupdate=false' --overwrite
clusterrole.rbac.authorization.k8s.io/self-provisioner removed: "system:authenticated:oauth"
[student@workstation ~]$ oc get clusterrolebinding -o wide | grep -E 'NAME|self-provisioner'
NAME                                                                             ROLE                                                                               AGE     USERS                                   GROUPS                                         SERVICEACCOUNTS
[student@workstation ~]$ oc login -u leader -p redhat
Login successful.

You have one project on this server: "default"

Using project "default".
[student@workstation ~]$ oc new-project test
Error from server (Forbidden): You may not request a new project via this API.
[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc policy add-role-to-user admin leader
clusterrole.rbac.authorization.k8s.io/admin added: "leader"
[student@workstation ~]$ oc adm groups new dev-group
Error from server (AlreadyExists): groups.user.openshift.io "dev-group" already exists
[student@workstation ~]$ oc adm groups add-users dev-group developer
group.user.openshift.io/dev-group added: "developer"
[student@workstation ~]$ oc adm groups new qa-group
Error from server (AlreadyExists): groups.user.openshift.io "qa-group" already exists
[student@workstation ~]$ oc adm groups add-users qa-group qa-engineer
group.user.openshift.io/qa-group added: "qa-engineer"
[student@workstation ~]$ oc get groups
NAME        USERS
dev-group   developer
qa-group    qa-engineer
[student@workstation ~]$ oc login -u leader -p redhat
Login successful.

You have one project on this server: "default"

Using project "default".
[student@workstation ~]$ oc policy add-role-to-group edit dev-group
clusterrole.rbac.authorization.k8s.io/edit added: "dev-group"
[student@workstation ~]$ oc policy add-role-to-group view qa-group
clusterrole.rbac.authorization.k8s.io/view added: "qa-group"
[student@workstation ~]$ oc get rolebindings -o wide
NAME                           ROLE                                       AGE     USERS    GROUPS                           SERVICEACCOUNTS
admin                          ClusterRole/admin                          9m45s   leader                                    
edit                           ClusterRole/edit                           8m17s            dev-group                        
machine-config-daemon-events   ClusterRole/machine-config-daemon-events   286d                                              openshift-machine-config-operator/machine-config-daemon
prometheus-k8s                 Role/prometheus-k8s                        286d                                              openshift-monitoring/prometheus-k8s
system:deployers               ClusterRole/system:deployer                286d                                              default/deployer
system:image-builders          ClusterRole/system:image-builder           286d                                              default/builder
system:image-pullers           ClusterRole/system:image-puller            286d             system:serviceaccounts:default   
view                           ClusterRole/view                           7m35s            qa-group                         
[student@workstation ~]$ oc login -u developer -p developer
Login successful.

You have one project on this server: "default"

Using project "default".
[student@workstation ~]$ oc new-app --name httpd httpd:2.4
--> Found image d9163e7 (10 months old) in image stream "default/httpd" under tag "2.4" for "httpd:2.4"

    Apache httpd 2.4 
    ---------------- 
    Apache httpd 2.4 available as container, is a powerful, efficient, and extensible web server. Apache supports a variety of features, many implemented as compiled modules which extend the core functionality. These can range from server-side programming language support to authentication schemes. Virtual hosting allows one Apache installation to serve many different Web sites.

    Tags: builder, httpd, httpd24


--> Creating resources ...
    error: deployments.apps "httpd" already exists
    error: services "httpd" already exists
--> Failed
[student@workstation ~]$ oc policy add-role-to-user edit qa-engineer
Error from server (Forbidden): rolebindings.rbac.authorization.k8s.io is forbidden: User "developer" cannot list resource "rolebindings" in API group "rbac.authorization.k8s.io" in the namespace "default"
[student@workstation ~]$ oc login -u qa-engineer -p redhat
Login successful.

You have one project on this server: "default"

Using project "default".
[student@workstation ~]$ oc scale deployment httpd --replicas 3
Error from server (Forbidden): deployments.apps "httpd" is forbidden: User "qa-engineer" cannot patch resource "deployments/scale" in API group "apps" in the namespace "default"
[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc adm policy add-cluster-role-to-group --rolebinding-name self-provisioners self-provisioner system:authenticated:oauth
Warning: Group 'system:authenticated:oauth' not found
clusterrole.rbac.authorization.k8s.io/self-provisioner added: "system:authenticated:oauth"
[student@workstation ~]$ lab auth-rbac finish

Completing Guided Exercise: Defining and Applying permissions using RBAC

 · Remove group 'dev-group'....................................  SUCCESS
 · Remove group 'qa-group'.....................................  SUCCESS
 · Delete HTPasswd entry for 'qa-engineer'.....................  SUCCESS
 · Update the 'localusers' secret data.........................  SUCCESS
 · Remove user 'qa-engineer'...................................  SUCCESS
 · Remove identity 'localusers:qa-engineer'....................  SUCCESS

Please use start if you wish to do the exercise again.

[student@workstation ~]$ 
---------------------------------CH-10-LAB-Configuring Authentication and Authorization -----------------------------------

Performance Checklist
In this lab, you will configure the HTPasswd identity provider, create groups, and assign roles
to users and groups.
Outcomes
You should be able to:
• Create users and passwords for HTPasswd authentication.
• Configure the Identity Provider for HTPasswd authentication.
• Assign cluster administration rights to users.
• Remove the ability to create projects at the cluster level.
• Create groups and add users to groups.
• Manage user privileges in projects by granting privileges to groups.

[student@workstation ~]$ lab auth-review start

Checking prerequisites for Lab: Configuring Authentication and Authorization

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'auth-review' project is absent.........................  SUCCESS

Setting up the classroom for Lab: Configuring Authentication and Authorization

 Preparing the student's workstation:
 · Download exercise files.....................................  SUCCESS
 · Download solution files.....................................  SUCCESS
 Restoring authentication settings to installation defaults:
 · Removing 'cluster-admin' role from the 'admin' user.........  SUCCESS
 · Remove HTPasswd secret: 'localusers'........................  SUCCESS
 · Remove all configured Identity Providers....................  SUCCESS
 · Remove all existing users...................................  SUCCESS
 · Remove all existing identities..............................  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ htpasswd -D ~/DO280/labs/auth-review/tmp_users analyst
Deleting password for user analyst
[student@workstation ~]$ for NAME in tester leader admin developer; do htpasswd -b ~/DO280/labs/auth-review/tmp_users ${NAME} 'L@bR3v!ew'; done
Updating password for user tester
Updating password for user leader
Adding password for user admin
Adding password for user developer
[student@workstation ~]$ cat ~/DO280/labs/auth-review/tmp_users
tester:$apr1$pWftNOjo$WpGDusz9BKBsn.Caj1fpH0
leader:$apr1$bDlLOnbf$5OwFwZmPpz6gLH.HiSizy1
admin:$apr1$sZFEbjdC$teVAttcMZ3I1IAzPLzZr60
developer:$apr1$iYyk.TYm$hQaw/9WdH.uQhG.MMpc0R1
[student@workstation ~]$ source /usr/local/etc/ocp4.config
[student@workstation ~]$ oc login -u kubeadmin -p ${RHT_OCP4_KUBEADM_PASSWD} https://api.ocp4.example.com:6443
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc create secret generic auth-review --from-file htpasswd=/home/student/DO280/labs/auth-review/tmp_users -n openshift-config
secret/auth-review created
[student@workstation ~]$ oc get oauth cluster -o yaml > ~/DO280/labs/auth-review/oauth.yaml
[student@workstation ~]$ vim ~/DO280/labs/auth-review/oauth.yaml
[student@workstation ~]$ cat !$
cat ~/DO280/labs/auth-review/oauth.yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  creationTimestamp: "2020-08-05T18:23:41Z"
  generation: 7
  managedFields:
  - apiVersion: config.openshift.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec: {}
    manager: cluster-version-operator
    operation: Update
    time: "2020-08-05T18:23:41Z"
  name: cluster
  resourceVersion: "140652"
  selfLink: /apis/config.openshift.io/v1/oauths/cluster
  uid: c96a18f6-b8de-4722-b5bf-ca6c39cdb78b
spec:
  identityProviders:
  - htpasswd:
      fileData:
         name: auth-review
       mappingMethod: claim
       name: htpasswd
       type: HTPasswd 
[student@workstation ~]$ oc replace -f ~/DO280/labs/auth-review/oauth.yaml
error: error parsing /home/student/DO280/labs/auth-review/oauth.yaml: error converting YAML to JSON: yaml: line 22: did not find expected key
[student@workstation ~]$ vim ~/DO280/labs/auth-review/oauth.yaml
[student@workstation ~]$ cat ~/DO280/labs/auth-review/oauth.yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  creationTimestamp: "2020-08-05T18:23:41Z"
  generation: 7
  managedFields:
  - apiVersion: config.openshift.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec: {}
    manager: cluster-version-operator
    operation: Update
    time: "2020-08-05T18:23:41Z"
  name: cluster
  resourceVersion: "140652"
  selfLink: /apis/config.openshift.io/v1/oauths/cluster
  uid: c96a18f6-b8de-4722-b5bf-ca6c39cdb78b
spec:
  identityProviders:
  - htpasswd:
      fileData:
        name: auth-review
    mappingMethod: claim
    name: htpasswd
    type: HTPasswd 
[student@workstation ~]$ oc replace -f ~/DO280/labs/auth-review/oauth.yaml
oauth.config.openshift.io/cluster replaced
[student@workstation ~]$ watch oc get pods -n openshift-authentication
[student@workstation ~]$ oc get pods -n openshift-authentication
NAME                               READY   STATUS        RESTARTS   AGE
oauth-openshift-797dd4fddd-8qlk6   1/1     Running       0          24s
oauth-openshift-797dd4fddd-bcwkl   1/1     Running       0          19s
oauth-openshift-b47664698-h2d8p    1/1     Terminating   0          7m7s
oauth-openshift-b47664698-wm4z4    1/1     Terminating   0          7m1s
[student@workstation ~]$ oc get pods -n openshift-authentication
NAME                               READY   STATUS        RESTARTS   AGE
oauth-openshift-797dd4fddd-8qlk6   1/1     Running       0          27s
oauth-openshift-797dd4fddd-bcwkl   1/1     Running       0          22s
oauth-openshift-b47664698-h2d8p    1/1     Terminating   0          7m10s
oauth-openshift-b47664698-wm4z4    1/1     Terminating   0          7m4s
[student@workstation ~]$ oc adm policy add-cluster-role-to-user cluster-admin admin
Warning: User 'admin' not found
clusterrole.rbac.authorization.k8s.io/cluster-admin added: "admin"
[student@workstation ~]$ oc login -u admin -p 'L@bR3v!ew'
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc get nodes
NAME       STATUS   ROLES           AGE    VERSION
master01   Ready    master,worker   286d   v1.18.3+012b3ec
master02   Ready    master,worker   286d   v1.18.3+012b3ec
master03   Ready    master,worker   286d   v1.18.3+012b3ec
[student@workstation ~]$ oc login -u developer -p 'L@bR3v!ew'
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc get nodes
Error from server (Forbidden): nodes is forbidden: User "developer" cannot list resource "nodes" in API group "" at the cluster scope
[student@workstation ~]$ oc login -u admin -p 'L@bR3v!ew'
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc adm policy remove-cluster-role-from-group self-provisioner system:authenticated:oauth
Warning: Your changes may get lost whenever a master is restarted, unless you prevent reconciliation of this rolebinding using the following command: oc annotate clusterrolebinding.rbac self-provisioners 'rbac.authorization.kubernetes.io/autoupdate=false' --overwrite
clusterrole.rbac.authorization.k8s.io/self-provisioner removed: "system:authenticated:oauth"
[student@workstation ~]$ oc adm groups new managers
group.user.openshift.io/managers created
[student@workstation ~]$ oc adm groups add-users managers leader
group.user.openshift.io/managers added: "leader"
[student@workstation ~]$ oc adm policy add-cluster-role-to-group self-provisioner managers
clusterrole.rbac.authorization.k8s.io/self-provisioner added: "managers"
[student@workstation ~]$ oc login -u leader -p 'L@bR3v!ew'
Login successful.

You have one project on this server: "default"

Using project "default".
[student@workstation ~]$ oc new-project auth-review
Now using project "auth-review" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc login -u admin -p 'L@bR3v!ew'
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "auth-review".
[student@workstation ~]$ oc adm groups new developers
group.user.openshift.io/developers created
[student@workstation ~]$ oc adm groups add-users developers developer
group.user.openshift.io/developers added: "developer"
[student@workstation ~]$ oc policy add-role-to-group edit developers
clusterrole.rbac.authorization.k8s.io/edit added: "developers"
[student@workstation ~]$ oc adm groups new qa
group.user.openshift.io/qa created
[student@workstation ~]$ oc adm groups add-users qa tester
group.user.openshift.io/qa added: "tester"
[student@workstation ~]$ oc policy add-role-to-group view qa
clusterrole.rbac.authorization.k8s.io/view added: "qa"
[student@workstation ~]$ lab auth-review grade

Grading the student's work for Lab: Configuring Authentication and Authorization

 · Cluster uses the HTPasswd identity provider.................  PASS
 · User 'analyst' does not exist in the HTPasswd secret........  PASS
 · The 'admin' user can log in with a password of 'L@bR3v!ew'..  PASS
 · The 'admin' user has the 'cluster-admin' cluster role.......  PASS
 · The 'self-provisioner' cluster role has been removed from th
   e 'system:authenticated:oauth' group........................  PASS
 · The 'managers' group exists.................................  PASS
 · The 'managers' group has the 'self-provisioner' cluster role
   ............................................................  PASS
 · The 'managers' group contains the 'leader' user.............  PASS
 · The 'leader' user can log in with a password of 'L@bR3v!ew'.  PASS
 · The 'auth-review' project exists............................  PASS
 · The 'leader' user has the 'admin' role on the 'auth-review' 
   project.....................................................  PASS
 · The 'developers' group exists...............................  PASS
 · The 'developers' group has the 'edit' role on the 'auth-revi
   ew' project.................................................  PASS
 · The 'dvelopers' group contains the 'developer' user.........  PASS
 · The 'developer' user can log in with a password of 'L@bR3v!e
   w'..........................................................  PASS
 · The 'qa' group exists.......................................  PASS
 · The 'qa' group has the 'view' role on the 'auth-review' proj
   ect.........................................................  PASS
 · The 'qa' group contains the 'tester' user...................  PASS
 · The 'tester' user can log in with a password of 'L@bR3v!ew'.  PASS

Overall exercise grade.........................................  PASS

[student@workstation ~]$ lab auth-review finish

Completing Lab: Configuring Authentication and Authorization

 · Delete OpenShift project 'auth-review'......................  SUCCESS
 · Wait for project 'auth-review' to be gone...................  SUCCESS
 · Remove exercise files.......................................  SUCCESS
 · Remove solution files.......................................  SUCCESS
 · Restore project creation privileges.........................  SUCCESS
 · Removing the cluster role binding 'clusterrolebinding.rbac.a
   uthorization.k8s.io/self-provisioner'.......................  SUCCESS
 Restoring authentication settings to installation defaults:
 · Removing 'cluster-admin' role from the 'admin' user.........  SUCCESS
 · Remove HTPasswd secret: 'auth-review'.......................  SUCCESS
 · Remove all configured Identity Providers....................  SUCCESS
 · Remove all existing users...................................  SUCCESS
 · Remove all existing groups..................................  SUCCESS
 · Remove all existing identities..............................  SUCCESS

Please use start if you wish to do the exercise again.

[student@workstation ~]$ 

Summary
In this chapter, you learned:
 A newly-installed OpenShift cluster provides two authentication methods that grant
 administrative access: the kubeconfig file and the kubeadmin virtual user.
  The HTPasswd identity provider authenticates users against credentials stored in a secret. The
  name of the secret, and other settings for the identity provider, are stored inside the OAuth
  custom resource.
   To manage user credentials using the HTPasswd identity provider, you must extract data from
   the secret, change that data using the htpasswd command, and then apply the data back to
   the secret.
    Creating OpenShift usrs requires valid credentials, managed by an identity provider, plus user
    and identity resources.
     Deleting OpenShift users requires deleting their credentials from the identity provider, and also
     deleting their user and identity resources.
      OpenShift uses role-based access control (RBAC) to control user actions. A role is a collection
      of rules that govern interaction with OpenShift resources. Default roles exist for cluster
      administrators, developers, and auditors.
       To control user interaction, assign a user to one or more roles. A role binding contains all of the
       associations of a role to users and groups.
        To grant a user cluster administrator privileges, assign the cluster-admin role to that user.
 --------------------------------CH-11-Configuring Application Security-------------------------------
  ----------------------Managing Sensitive Information with Secrets------------------------------------
  Secrets Overview
Modern applications are designed to loosely couple code, configuration, and data. Configuration
files and data are not hard-coded as part of the software. Instead, the software loads configuration
and data from an external source. This enables deploying an application to different environments
without requiring a change to the application source code.
Applications often require access to sensitive information. For example, a back-end web
application requires access to database credentials to perform a database query.
Kubernetes and OpenShift use secret resources to hold sensitive information, such as:
• Passwords.
• Sensitive configuration files.
• Credentials to an external resource, such as an SSH key or OAuth token.
A secret can store any type of data. Data in a secret is Base64-encoded, not stored in plain text.
Secret data is not encrypted; you can decode the secret from Base64 format to access the
original data.
Although secrets can store any type of data, Kubernetes and OpenShift support different types
of secrets. Different types of secret resources exist, including service account tokens, SSH keys,
and TLS certificates. When you store information in a specific secret resource type, Kubernetes
validates that the data conforms to the type of secret.
Note
You can encrypt the Etcd database, although this is not the default setting. When
enabled, Etcd encrypts the following resources: secrets, configuration maps, routes,
OAuth access tokens, and OAuth authorize tokens. Enabling Etcd encryption is
outside the scope of this class.

Features of Secrets
The main features of secrets include:
• Secret data can be shared within a project namespace.
• Secret data is referenced independently of secret definition. Administrators can create and
manage a secret resource that other team members can reference in their deployment
configurations.
Secret data is injected into pods when OpenShift creates a pod. You can expose a secret as an
environment variable or as a mounted file in the pod.
• If the value of a secret changes during pod execution, the secret data in the pod does not
update. After a secret value changes, you must create new pods to inject the new secret data.
• Any secret data that OpenShift injects into a pod is ephemeral. If OpenShift exposes sensitive
data to a pod as environment variables, then those variables are destroyed when the pod is
destroyed.
Secret data volumes are backed by temporary file storage. If a secret is mounted as a file in the
pod, then the file is also destroyed when the pod is destroyed. A stopped pod does not contain
secret data.

Use Cases for Secrets
Two primary use cases for secrets are storing credentials and securing communication between
services.
 
Credentials
Store sensitive information, such as passwords and user names, in a secret.
If an application expects to read sensitive information from a file, then you mount the secret as
a data volume to the pod. The application can read the secret as an ordinary file to access the
sensitive information. Some databases, for example, read credentials from a file to authenticate
users.
Some applications use environment variables to read configuration and sensitive data. You can link
secret variables to pod environment variables in a deployment configuration.
Transport Layer Security (TLS) and Key Pairs
Use a TLS certificate and key to secure communication to a pod. A TLS secret stores the
certificate as tls.crt and the certificate key as tls.key. Developers can mount the secret as a
volume and create a pass through route to the application.
        
 env:
- name: MYSQL_ROOT_PASSWORD
valueFrom:
secretKeyRef:
name: demo-secret
key: root_password

The environment variable name in the pod that contains data from a secret.
The secretKeyRef key expects a secret. Use the configMapKeyRef key for configuration
maps.
The name of the secret that contains the desired sensitive information.
The name of the key that contains the sensitive information in the secret.
        
[user@demo ~]$ oc set env deployment/demo --from secret/demo-secret --prefix MYSQL_

Secrets as Files in a Pod
A secret can be mounted to a directory within a pod. A file is created for each key in the secret
using the name of the key. The content of each file is the decoded value of the secret.

[user@demo ~]$ oc set volume deployment/demo -add --type secret --secret-name demo-secret --mount-path /app-secrets
Modify the volume configuration in the demo deployment.
Add a new volume from a secret. Configuration maps can also be mounted as volumes.
Use the demo-secret secret.
Make the secret data available in the /app-secrets directory in the pod. The content
of the /app-secrets/user file is demo-user. The content of the /app-secrets/
root_password file is zT1KTgk.

Important
If the mount point already exists in the pod, then any existing files at the mount
point are obscured by the mounted secret. The existing files are not visible and are
not accessible.

Configuration Map Overview
Similar to secrets, configuration maps decouple configuration information from container images.
Unlike secrets, the information contained in configuration maps does not require protection. You
can use the data in a configuration map to set environment variables in the container image, or
mount the configuration map as a volume within the container image.
Container images do not need to be rebuilt when a secret or a configuration map changes. New
pods use the updated secrets and configuration maps. You can delete pods using the older secrets
and configuration maps.
The syntax for creating a configuration map closely matches the syntax for creating a secret. Key-
value pairs can be entered on the command line or the content of a file can be used as the value of
a specified key.

[user@demo ~]$ oc create configmap my-config --from-literal key1=config1 --from-literal key2=config2

Updating Secrets and Configuration Maps

[user@demo ~]$ oc extract secret/htpasswd-ppklq -n openshift-config --to /tmp/ --confirm

[user@demo ~]$ oc set data secret/htpasswd-ppklq -n openshift-config --from-file /tmp/htpasswd

--------------------------CH11-GE-Managing Sensitive Information With Secrets ---------------------------------------
In this exercise, you will manage information using secrets.
Outcomes
You should be able to:
• Manage secrets and use them to initialize environment variables in applications.
• Use secrets for a MySQL database application.
• Assign secrets to an application that connects to a MySQL database.

project.project.openshift.io "authorization-secrets" deleted
[student@workstation ~]$ clear

[student@workstation ~]$ lab authorization-secrets start

Checking prerequisites for Guided Exercise: Managing Sensitive Information With Secrets

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'authorization-secrets' project is absent...............  SUCCESS

Setting up the classroom for Guided Exercise: Managing Sensitive Information With Secrets

 · Validate 'admin' can log in with password 'redhat'..........  SUCCESS
 · Validate 'leader' can log in with password 'redhat'.........  SUCCESS
 · Validate 'developer' can log in with password 'developer'...  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ oc login -u developer -p developer https://api.ocp4.example.com:6443
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc new-project authorization-secrets
Now using project "authorization-secrets" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc create secret generic mysql --from-literal user=myuser --from-literal password=redhat123 --from-literal database=test_secrets --from-literal hostname=mysql
secret/mysql created
[student@workstation ~]$ oc new-app --name mysql --docker-image registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7-47
--> Found container image 77d20f2 (21 months old) from registry.access.redhat.com for "registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7-47"

    MySQL 5.7 
    --------- 
    MySQL is a multi-user, multi-threaded SQL database server. The container image provides a containerized packaging of the MySQL mysqld daemon and client application. The mysqld server daemon accepts connections from clients and provides access to content from MySQL databases on behalf of the clients.

    Tags: database, mysql, mysql57, rh-mysql57

    * An image stream tag will be created as "mysql:5.7-47" that will track this image

--> Creating resources ...
    imagestream.image.openshift.io "mysql" created
    deployment.apps "mysql" created
    service "mysql" created
--> Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/mysql' 
    Run 'oc status' to view your app.
[student@workstation ~]$ oc get pods -w
NAME                     READY   STATUS             RESTARTS   AGE
mysql-786bb947f9-ls56q   0/1     CrashLoopBackOff   1          10s
mysql-786bb947f9-ls56q   0/1     Error              2          17s
^C
[student@workstation ~]$ oc set env deployment/mysql --from secret/mysql --prefix MYSQL_
deployment.apps/mysql updated
[student@workstation ~]$ oc set volume deployment/mysql --add --type secret --mount-path /run/secrets/mysql --secret-name mysql
info: Generated volume name: volume-xbjb4
deployment.apps/mysql volume updated
[student@workstation ~]$ oc get pods
NAME                     READY   STATUS        RESTARTS   AGE
mysql-64b946f96c-2dzrr   1/1     Running       0          9s
mysql-7cd7499d66-mg898   0/1     Terminating   0          38s
[student@workstation ~]$ oc get pods
NAME                     READY   STATUS        RESTARTS   AGE
mysql-64b946f96c-2dzrr   1/1     Running       0          17s
mysql-7cd7499d66-mg898   0/1     Terminating   0          46s
[student@workstation ~]$ oc get pods
NAME                     READY   STATUS    RESTARTS   AGE
mysql-64b946f96c-2dzrr   1/1     Running   0          63s
[student@workstation ~]$ oc rsh mysql-64b946f96c-2dzrr
sh-4.2$ mysql -u myuser --password=redhat123 test_secrets -e 'show databases;'
mysql: [Warning] Using a password on the command line interface can be insecure.
+--------------------+
| Database           |
+--------------------+
| information_schema |
| test_secrets       |
+--------------------+
sh-4.2$ df -h | grep mysql
tmpfs                                 7.9G   16K  7.9G   1% /run/secrets/mysql
sh-4.2$ for FILE in $(ls /run/secrets/mysql); do echo "${FILE}: $(cat /run/secrets/mysql/${FILE})"; done
database: test_secrets
hostname: mysql
password: redhat123
user: myuser
sh-4.2$ exit
exit
[student@workstation ~]$

[student@workstation ~]$ oc get pods
NAME                     READY   STATUS    RESTARTS   AGE
mysql-64b946f96c-2dzrr   1/1     Running   0          10m
[student@workstation ~]$ oc new-app --name quotes --docker-image quay.io/redhattraining/famous-quotes:2.1
--> Found container image 7ff1a7b (7 months old) from quay.io for "quay.io/redhattraining/famous-quotes:2.1"

    Quotes 2.1 
    ---------- 
    Famous Quotes is a PoC application for Go and MySQL

    Tags: poc, mysql, golang

    * An image stream tag will be created as "quotes:2.1" that will track this image

--> Creating resources ...
    imagestream.image.openshift.io "quotes" created
    deployment.apps "quotes" created
    service "quotes" created
--> Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/quotes' 
    Run 'oc status' to view your app.
[student@workstation ~]$ oc get pods -l deployment=quotes -w
NAME                      READY   STATUS              RESTARTS   AGE
quotes-6b8b7d87ff-t6fcc   0/1     ContainerCreating   0          18s
quotes-6b8b7d87ff-t6fcc   0/1     Error               0          34s
quotes-6b8b7d87ff-t6fcc   0/1     Error               1          36s
quotes-6b8b7d87ff-t6fcc   0/1     CrashLoopBackOff    1          37s
^C[student@workstation ~]$ oc set env deployment/quotes --from secret/mysql --prefix QUOTES_
deployment.apps/quotes updated
[student@workstation ~]$ oc get pods -l deployment=quotes
NAME                      READY   STATUS              RESTARTS   AGE
quotes-6b8b7d87ff-t6fcc   0/1     CrashLoopBackOff    3          98s
quotes-9c8495c4-vbx6w     0/1     ContainerCreating   0          15s
[student@workstation ~]$ oc logs quotes-9c8495c4-vbx6w
2021/05/20 05:08:07 Connecting to the database: myuser:redhat123@tcp(mysql:3306)/test_secrets
2021/05/20 05:08:07 Database connection OK
2021/05/20 05:08:07 Creating schema
2021/05/20 05:08:07 Adding quotes
2021/05/20 05:08:07 Adding quote: When words fail, music speaks.
- William Shakespeare
2021/05/20 05:08:07 Adding quote: Happiness depends upon ourselves.
- Aristotle
2021/05/20 05:08:07 Adding quote: The secret of change is to focus all your energy not on fighting the old but on building the new.
- Socrates
2021/05/20 05:08:07 Adding quote: Nothing that glitters is gold.
- Mark Twain
2021/05/20 05:08:07 Adding quote: Imagination is more important than knowledge.
- Albert Einstein
2021/05/20 05:08:07 Adding quote: Hell, if I could explain it to the average person, it wouldn't have been worth the Nobel prize.
- Richard Feynman
2021/05/20 05:08:07 Adding quote: Young man, in mathematics you don't understand things. You just get used to them.
- John von Neumann
2021/05/20 05:08:07 Adding quote: Those who can imagine anything, can create the impossible.
- Alan Turing
2021/05/20 05:08:07 Database Setup Completed
2021/05/20 05:08:07 Starting Application
Services:
/
/random
/env
/status
[student@workstation ~]$ oc expose service quotes --hostname quotes.apps.ocp4.example.com
route.route.openshift.io/quotes exposed
[student@workstation ~]$ oc get route quotes
NAME     HOST/PORT                      PATH   SERVICES   PORT       TERMINATION   WILDCARD
quotes   quotes.apps.ocp4.example.com          quotes     8000-tcp                 None
[student@workstation ~]$ curl -s http://quotes.apps.ocp4.example.com/env | grep QUOTES_
                <li>QUOTES_USER: myuser </li>
                <li>QUOTES_PASSWORD: redhat123 </li>
                <li>QUOTES_DATABASE: test_secrets</li>
                <li>QUOTES_HOST: mysql</li>
[student@workstation ~]$ curl -s http://quotes.apps.ocp4.example.com/status
Database connection OK
[student@workstation ~]$ curl -s http://quotes.apps.ocp4.example.com/random
2: Happiness depends upon ourselves.
- Aristotle
[student@workstation ~]$ oc delete project authorization-secrets
project.project.openshift.io "authorization-secrets" deleted
[student@workstation ~]$ lab authorization-secrets finish

Completing Guided Exercise: Managing Sensitive Information With Secrets


Please use start if you wish to do the exercise again.

[student@workstation ~]$ 

-------------------------------CH 11-Controlling Application Permissions with Security Context Constraints------------------------
Objectives
After completing this section, you should be able to:
• Create service accounts and apply permissions.
• Manage security context constraints.
Security Context Constraints (SCCs)
Red Hat OpenShift provides security context constraints (SCCs), a security mechanism that
restricts access to resources, but not to operations in OpenShift.

SCCs limit the access from a running pod in OpenShift to the host environment. SCCs control:
*Running privileged containers.
*Requesting extra capabilities for a container
*Using host directories as volumes.
*Changing the SELinux context of a container.
*Changing the user ID.

Some containers developed by the community might require relaxed security context constraints
to access resources that are forbidden by default, such as file systems, sockets, or to access a
SELinux context.
You can run the following command as a cluster administrator to list the SCCs defined by
OpenShift:
[user@demo ~]$ oc get scc

OpenShift provides eight SCCs:
anyuid
hostaccess
hostmount-anyuid
hostnetwork
node-exporter
nonroot
privileged
restricted
[user@demo ~]$ oc describe scc anyuid

Most pods created by OpenShift use the SCC named restricted, which provides limited access
to resources external to OpenShift. Use the oc describe command to view the security context
constraint that a pod uses.
[user@demo ~]$ oc describe pod console-5df4fcbb47-67c52 -n openshift-console | grep scc
openshift.io/scc: restricted

Container images downloaded from public container registries, such as Docker Hub, might fail
to run using the restricted SCC. For example, a container image that requires running as a
specific user ID can fail because the restricted SCC runs the container using a random user
ID. A container image that listens on port 80 or port 443 can fail for a related reason. The random
user ID used by the restricted SCC cannot start a service that listens on a privileged network
port (port numbers less than 1024). Use the scc-subject-review subcommand to list all the
security context constraints that can overcome the limitations of a container.

[user@demo ~]$ oc get pod podname -o yaml | oc adm policy scc-subject-review -f -

For the anyuid SCC, the run as user strategy is defined as RunAsAny, which means that the
pod can run as any user ID available in the container. This strategy allows containers that require a
specific user to run the commands using a specific user ID.
To change the container to run using a different SCC, you must create a service account bound to
a pod. Use the oc create serviceaccount command to create the service account, and use
the -n option if the service account must be created in a namespace different than the current
one.
[user@demo ~]$ oc create serviceaccount service-account-name

To associate the service account with an SCC, use the oc adm policy command. Use the -
z option to identify a service account, and use the -n option if the service account exists in a
namespace different than the current one.

[user@demo ~]$ oc adm policy add-scc-to-user SCC -z service-account

Important
Assigning an SCC to a service account or removing an SCC from a service account
must be performed by a cluster administrator. Allowing pods to run with a less
restrictive SCC can make your cluster less secure. Use with caution.

Modify an existing deployment or deployment configuration to use the service account using the
oc set serviceaccount command. If the command succeeds, then the pods associated with
the deployment or deployment configuration redeploy.

[user@demo ~]$ oc set serviceaccount deployment/deployment-name service-account-name

Privileged Containers
Some containers might need to access the runtime environment of the host. For example, the
S2I builder containers are a class of privileged containers that require access beyond the limits of
their own containers. These containers can pose security risks because they can use any resources
on an OpenShift node. Use SCCs to enable access for privileged containers by creating service
accounts with privileged access.

-------------Ch11-GE-Controlling Application Permissions with Security Context Constraints----------------------------
In this exercise, you will deploy applications that require pods with extended permissions.
Outcomes
You should be able to:
• Create service accounts and assign security context constraints (SCCs) to them.
• Assign a service account to a deployment configuration.
• Run applications that need root privileges.
Before You Begin
As the student user on the workstation machine, use the lab command to prepare your
system for this exercise.
This command ensures that the cluster API is reachable and creates some HTPasswd users
for the exercise
[student@workstation ~]$ lab authorization-scc start

Checking prerequisites for Guided Exercise: Controlling Application Permissions with Security Context Constraints

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'authorization-scc' project is absent...................  SUCCESS

Setting up the classroom for Guided Exercise: Controlling Application Permissions with Security Context Constraints

 · Validate 'admin' can log in with password 'redhat'..........  SUCCESS
 · Validate 'leader' can log in with password 'redhat'.........  SUCCESS
 · Validate 'developer' can log in with password 'developer'...  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ oc login -u developer -p developer https://api.ocp4.example.com:6443
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc new-project authorization-scc
Now using project "authorization-scc" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc new-app --name gitlab --docker-image quay.io/redhattraining/gitlab-ce:8.4.3-ce.0
--> Found container image a26371b (5 years old) from quay.io for "quay.io/redhattraining/gitlab-ce:8.4.3-ce.0"

    * An image stream tag will be created as "gitlab:8.4.3-ce.0" that will track this image

--> Creating resources ...
    imagestream.image.openshift.io "gitlab" created
    deployment.apps "gitlab" created
    service "gitlab" created
--> Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/gitlab' 
    Run 'oc status' to view your app.
[student@workstation ~]$ oc get all
NAME                          READY   STATUS              RESTARTS   AGE
pod/gitlab-559f9d6f77-9k8lg   0/1     ContainerCreating   0          30s

NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                 AGE
service/gitlab   ClusterIP   172.30.91.100   <none>        22/TCP,80/TCP,443/TCP   32s

NAME                     READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/gitlab   0/1     1            0           32s

NAME                                DESIRED   CURRENT   READY   AGE
replicaset.apps/gitlab-559f9d6f77   1         1         0       30s
replicaset.apps/gitlab-58ddc674c    1         0         0       32s

NAME                                    IMAGE REPOSITORY                                                            TAGS         UPDATED
imagestream.image.openshift.io/gitlab   image-registry.openshift-image-registry.svc:5000/authorization-scc/gitlab   8.4.3-ce.0   30 seconds ago
[student@workstation ~]$ 
[student@workstation ~]$ oc get pods
NAME                      READY   STATUS    RESTARTS   AGE
gitlab-648947b54f-s5hq5   1/1     Running   1          13s
[student@workstation ~]$ oc get pods
NAME                      READY   STATUS   RESTARTS   AGE
gitlab-648947b54f-s5hq5   0/1     Error    1          27s
[student@workstation ~]$ oc logs pod/gitlab-648947b54f-s5hq5
Thank you for using GitLab Docker Image!
Current version: gitlab-ce=8.4.3-ce.0

Configure GitLab for your system by editing /etc/gitlab/gitlab.rb file
And restart this container to reload settings.
To do it use docker exec:

  docker exec -it gitlab vim /etc/gitlab/gitlab.rb
  docker restart gitlab

For a comprehensive list of configuration options please see the Omnibus GitLab readme
https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md

If this container fails to start due to permission problems try to fix it by executing:

  docker exec -it gitlab update-permissions
  docker restart gitlab

Preparing services...
Starting services...
Configuring GitLab...
/opt/gitlab/embedded/bin/runsvdir-start: line 34: ulimit: max user processes: cannot modify limit: Operation not permitted
/opt/gitlab/embedded/bin/runsvdir-start: line 37: /proc/sys/fs/file-max: Read-only file system
[2021-05-20T05:31:05+00:00] WARN: Ohai::Config[:disabled_plugins] is set. Ohai::Config[:disabled_plugins] is deprecated and will be removed in future releases of ohai. Use ohai.disabled_plugins in your configuration file to configure :disabled_plugins for ohai.
[2021-05-20T05:31:05+00:00] INFO: Started chef-zero at chefzero://localhost:8889 with repository at /opt/gitlab/embedded
  One version per cookbook

[2021-05-20T05:31:05+00:00] INFO: Forking chef instance to converge...
[2021-05-20T05:31:05+00:00] INFO: *** Chef 12.5.1 ***
[2021-05-20T05:31:05+00:00] INFO: Chef-client pid: 23
[2021-05-20T05:31:07+00:00] INFO: HTTP Request Returned 404 Not Found: Object not found: chefzero://localhost:8889/nodes/gitlab-648947b54f-s5hq5
[2021-05-20T05:31:07+00:00] INFO: Setting the run_list to ["recipe[gitlab]"] from CLI options
[2021-05-20T05:31:07+00:00] INFO: Run List is [recipe[gitlab]]
[2021-05-20T05:31:07+00:00] INFO: Run List expands to [gitlab]
[2021-05-20T05:31:07+00:00] INFO: Starting Chef Run for gitlab-648947b54f-s5hq5
[2021-05-20T05:31:07+00:00] INFO: Running start handlers
[2021-05-20T05:31:07+00:00] INFO: Start handlers complete.
[2021-05-20T05:31:07+00:00] INFO: HTTP Request Returned 404 Not Found: Object not found: 
[2021-05-20T05:31:07+00:00] INFO: Loading cookbooks [gitlab@0.0.1, runit@0.14.2, package@0.0.0]
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/bootstrap_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/ci-redis.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/ci-redis_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/cron.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/database_migrations.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/default.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/gitlab-ci_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/ci-unicorn_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/gitlab-ci.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/gitlab-workhorse.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/logrotate.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/logrotate_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/mailroom.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/mailroom_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/mattermost.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/ci-sidekiq_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/mattermost_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/nginx.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/nginx_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/ci-unicorn.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/postgresql_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/gitlab-rails.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/ci-sidekiq.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/bootstrap.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/gitlab-shell.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/redis_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/gitlab-workhorse_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/selinux.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/remove_accounts.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/remote-syslog.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/sidekiq.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/redis.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/remote-syslog_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/sidekiq_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/account.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/env_dir.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/users.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/unicorn.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/redis_service.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/template_symlink.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/postgresql.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/migrate_database.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/libraries/account_helper.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/libraries/helper.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/libraries/gitlab.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/web-server.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/unicorn_service.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/sysctl.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/sidekiq_service.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/show_config.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/recipes/unicorn_disable.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/aws.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/gitlab-ci-rc.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/files/default/mail_room.yml in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/config.json.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/application.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/gitconfig-system.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/gitlab-shell-config.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/database.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/logrotate.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/gitconfig.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/attributes/default.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/gitlab-rails-rc.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/nginx-gitlab-mattermost-http.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/nginx-gitlab-pages-http.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/nginx.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/definitions/unicorn_config.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/pg_ident.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/postgresql.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/rack_attack.rb.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/redis.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/mount_point_check.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/gitlab-rails-config.ru.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/secret_token.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/resque.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/nginx-gitlab-ci-http.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/logrotate-service.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/smtp_settings.rb.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-gitlab-workhorse-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-gitlab-workhorse-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/secrets.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-gitlab-workhorse-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-logrotate-control-t.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-logrotate-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/postgresql-init.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-logrotate-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/pg_hba.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-mailroom-finish.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-mailroom-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-mailroom-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-mailroom-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/nginx-gitlab-http.conf.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-logrotate-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-mattermost-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-mattermost-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/remote_syslog.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-nginx-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-nginx-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/gitlab.yml.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-nginx-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-redis-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-postgresql-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-postgresql-control-t.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-mattermost-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-sidekiq-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-postgresql-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-postgresql-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-remote-syslog-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-redis-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-redis-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-remote-syslog-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-unicorn-control-t.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-unicorn-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-sidekiq-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-unicorn-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/metadata.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-sidekiq-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/recipes/sysvinit.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-remote-syslog-log-config.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/recipes/upstart.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/recipes/systemd.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/files/default/gitlab-runsvdir.conf in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/unicorn.rb.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/gitlab/templates/default/sv-unicorn-log-run.erb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/package/attributes/default.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/definitions/runit_service.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/attributes/default.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/recipes/default.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/metadata.rb in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/files/default/gitlab-runsvdir.service in the cache.
[2021-05-20T05:31:07+00:00] INFO: Storing updated cookbooks/runit/README.md in the cache.

================================================================================
Error executing action `create` on resource 'directory[/etc/gitlab]'
================================================================================

Chef::Exceptions::InsufficientPermissions
-----------------------------------------
Cannot create directory[/etc/gitlab] at /etc/gitlab due to insufficient permissions

Cookbook Trace:
---------------
/opt/gitlab/embedded/cookbooks/cache/cookbooks/gitlab/recipes/default.rb:31:in `from_file'

Resource Declaration:
---------------------
# In /opt/gitlab/embedded/cookbooks/cache/cookbooks/gitlab/recipes/default.rb

 26: directory "/etc/gitlab" do
 27:   owner "root"
 28:   group "root"
 29:   mode "0775"
 30:   action :nothing
 31: end.run_action(:create)
 32: 
 33: Gitlab[:node] = node
 34: if File.exists?("/assets/gitlab.rb")
 35:   Gitlab.from_file("/assets/gitlab.rb")
 36: end
 37: node.consume_attributes(Gitlab.generate_config(node['fqdn']))

Compiled Resource:
------------------
# Declared in /opt/gitlab/embedded/cookbooks/cache/cookbooks/gitlab/recipes/default.rb:26:in `from_file'

directory("/etc/gitlab") do
  action [:nothing]
  retries 0
  retry_delay 2
  default_guard_interpreter :default
  path "/etc/gitlab"
  declared_type :directory
  cookbook_name "gitlab"
  recipe_name "default"
  owner "root"
  group "root"
  mode "0775"
end


================================================================================
Recipe Compile Error in /opt/gitlab/embedded/cookbooks/cache/cookbooks/gitlab/recipes/default.rb
================================================================================

Chef::Exceptions::InsufficientPermissions
-----------------------------------------
directory[/etc/gitlab] (gitlab::default line 26) had an error: Chef::Exceptions::InsufficientPermissions: Cannot create directory[/etc/gitlab] at /etc/gitlab due to insufficient permissions

Cookbook Trace:
---------------
  /opt/gitlab/embedded/cookbooks/cache/cookbooks/gitlab/recipes/default.rb:31:in `from_file'

Relevant File Content:
----------------------
/opt/gitlab/embedded/cookbooks/cache/cookbooks/gitlab/recipes/default.rb:

 24:  ENV['PATH'] = "#{install_dir}/bin:#{install_dir}/embedded/bin:#{ENV['PATH']}"
 25:  
 26:  directory "/etc/gitlab" do
 27:    owner "root"
 28:    group "root"
 29:    mode "0775"
 30:    action :nothing
 31>> end.run_action(:create)
 32:  
 33:  Gitlab[:node] = node
 34:  if File.exists?("/assets/gitlab.rb")
 35:    Gitlab.from_file("/assets/gitlab.rb")
 36:  end
 37:  node.consume_attributes(Gitlab.generate_config(node['fqdn']))
 38:  
 39:  if File.exists?("/var/opt/gitlab/bootstrapped")
 40:  	node.set['gitlab']['bootstrap']['enable'] = false

[2021-05-20T05:31:08+00:00] ERROR: Running exception handlers
[2021-05-20T05:31:08+00:00] ERROR: Exception handlers complete
[2021-05-20T05:31:08+00:00] FATAL: Stacktrace dumped to /opt/gitlab/embedded/cookbooks/cache/chef-stacktrace.out
[2021-05-20T05:31:08+00:00] ERROR: directory[/etc/gitlab] (gitlab::default line 26) had an error: Chef::Exceptions::InsufficientPermissions: Cannot create directory[/etc/gitlab] at /etc/gitlab due to insufficient permissions
[2021-05-20T05:31:09+00:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)
[student@workstation ~]$ 
[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "authorization-scc".
[student@workstation ~]$ oc get pod/gitlab-7d67db7875-gcsjl -o yaml | oc adm policy scc-subject-review -f -
Error from server (NotFound): pods "gitlab-7d67db7875-gcsjl" not found
[student@workstation ~]$ oc get pods
NAME                      READY   STATUS             RESTARTS   AGE
gitlab-648947b54f-s5hq5   0/1     CrashLoopBackOff   5          4m25s
[student@workstation ~]$ oc get pod/gitlab-648947b54f-s5hq5 -o yaml | oc adm policy scc-subject-review -f -
RESOURCE                      ALLOWED BY   
Pod/gitlab-648947b54f-s5hq5   anyuid       
[student@workstation ~]$ oc create sa gitlab-sa
serviceaccount/gitlab-sa created
[student@workstation ~]$ oc adm policy add-scc-to-user anyuid -z gitlab-sa
clusterrole.rbac.authorization.k8s.io/system:openshift:scc:anyuid added: "gitlab-sa"
[student@workstation ~]$ oc login -u developer -p developer
Login successful.

You have one project on this server: "authorization-scc"

Using project "authorization-scc".
[student@workstation ~]$ oc set serviceaccount deployment/gitlab gitlab-sa
deployment.apps/gitlab serviceaccount updated
[student@workstation ~]$ oc get pods
NAME                      READY   STATUS              RESTARTS   AGE
gitlab-6446755679-phshm   0/1     ContainerCreating   0          9s
gitlab-648947b54f-s5hq5   0/1     CrashLoopBackOff    8          18m
[student@workstation ~]$ oc get pods
NAME                      READY   STATUS              RESTARTS   AGE
gitlab-6446755679-phshm   0/1     ContainerCreating   0          17s
gitlab-648947b54f-s5hq5   0/1     CrashLoopBackOff    8          18m
[student@workstation ~]$ oc get pods
NAME                      READY   STATUS    RESTARTS   AGE
gitlab-6446755679-phshm   1/1     Running   0          8m25s
[student@workstation ~]$ oc expose service/gitlab --port 80 --hostname gitlab.apps.ocp4.example.com
route.route.openshift.io/gitlab exposed
[student@workstation ~]$ oc get routes
NAME     HOST/PORT                      PATH   SERVICES   PORT   TERMINATION   WILDCARD
gitlab   gitlab.apps.ocp4.example.com          gitlab     80                   None
[student@workstation ~]$ curl -s http://gitlab.apps.ocp4.example.com/users/sign_in | grep '<title>'
<title>Sign in · GitLab</title>
[student@workstation ~]$ oc delete project authorization-scc
project.project.openshift.io "authorization-scc" deleted
[student@workstation ~]$ lab authorization-scc finish

Completing Guided Exercise: Controlling Application Permissions with Security Context Constraints


Please use start if you wish to do the exercise again.

[student@workstation ~]$ 
-------------------------------CH-ll-Lab-Configuring Application Security--------------------


