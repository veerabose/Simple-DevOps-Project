
--------------------------------------CH10-GE-Configuring Identity Providers--------------------------------
In this exercise, you will configure the HTPasswd identity provider and create users for cluster
administrators.
Outcomes
You should be able to:
 Create users and passwords for HTPasswd authentication.
  Configure the Identity Provider for HTPasswd authentication.
   Assign cluster administration rights to users.
   
[student@workstation ~]$ lab auth-provider start

Checking prerequisites for Guided Exercise: Configuring Identity Providers

 Verify the OpenShift cluster is running:
 · Router pods are available...................................  SUCCESS
 · OAuth pods are available....................................  SUCCESS
 · API pods are available......................................  SUCCESS
 · Control plane node 'master01' is ready......................  SUCCESS
 · Control plane node 'master02' is ready......................  SUCCESS
 · Control plane node 'master03' is ready......................  SUCCESS
 Checking for conflicts with existing OpenShift projects:
 · The 'auth-provider' project is absent.......................  SUCCESS

Setting up the classroom for Guided Exercise: Configuring Identity Providers

 Preparing the student's workstation:
 · Download exercise files.....................................  SUCCESS
 · Download solution files.....................................  SUCCESS
 Restoring authentication settings to installation defaults:
 · No need to perform any change...............................  SUCCESS

Overall start status...........................................  SUCCESS

[student@workstation ~]$ source /usr/local/etc/ocp4.config
[student@workstation ~]$ htpasswd -c -B -b ~/DO280/labs/auth-provider/htpasswd admin redhat
Adding password for user admin
[student@workstation ~]$ htpasswd -b ~/DO280/labs/auth-provider/htpasswd developer developer
Adding password for user developer
[student@workstation ~]$ cat ~/DO280/labs/auth-provider/htpasswd
admin:$2y$05$xEETU3573YrbGmznTMMBZOSrgcSUpXX5WBqivpRVKDF6MUMO0qSs2
developer:$apr1$fwuleoSK$fijQ.FKM0XsUwedL9EAQ60
[student@workstation ~]$ oc login -u kubeadmin -p ${RHT_OCP4_KUBEADM_PASSWD} https://api.ocp4.example.com:6443
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc create secret generic localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers created
[student@workstation ~]$ oc adm policy add-cluster-role-to-user cluster-admin admin
Warning: User 'admin' not found
clusterrole.rbac.authorization.k8s.io/cluster-admin added: "admin"
[student@workstation ~]$ oc get oauth cluster -o yaml > ~/DO280/labs/auth-provider/oauth.yaml
[student@workstation ~]$ vim ~/DO280/labs/auth-provider/oauth.yaml
[student@workstation ~]$ cat !$
cat ~/DO280/labs/auth-provider/oauth.yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"config.openshift.io/v1","kind":"OAuth","metadata":{"annotations":{},"name":"cluster"},"spec":{"identityProviders":[{"challenge":true,"htpasswd":{"fileData":{"name":"localusers"}},"login":true,"mappingMethod":"claim","name":"localusers","type":"HTPasswd"}]}}
    release.openshift.io/create-only: "true"
  creationTimestamp: "2020-08-05T18:23:41Z"
  generation: 3
  managedFields:
  - apiVersion: config.openshift.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:release.openshift.io/create-only: {}
      f:spec: {}
    manager: cluster-version-operator
    operation: Update
    time: "2020-08-05T18:23:41Z"
  - apiVersion: config.openshift.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:kubectl.kubernetes.io/last-applied-configuration: {}
    manager: oc
    operation: Update
    time: "2020-11-23T15:53:12Z"
  name: cluster
  resourceVersion: "82447"
  selfLink: /apis/config.openshift.io/v1/oauths/cluster
  uid: c96a18f6-b8de-4722-b5bf-ca6c39cdb78b
spec:
  identityProviders:
  - htpasswd:
      fileData:
        name: localusers
    mappingMethod: claim
    name: myusers
    type: HTPasswd
[student@workstation ~]$ oc replace -f ~/DO280/labs/auth-provider/oauth.yaml
oauth.config.openshift.io/cluster replaced
[student@workstation ~]$ 

Note
Pods in the openshift-authentication namespace will redeploy if the oc
replace command succeeds. Provided the previously created secret was created
correctly, you can log in using the HTPasswd identity provider

[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc get nodes
NAME       STATUS   ROLES           AGE    VERSION
master01   Ready    master,worker   285d   v1.18.3+012b3ec
master02   Ready    master,worker   285d   v1.18.3+012b3ec
master03   Ready    master,worker   285d   v1.18.3+012b3ec
[student@workstation ~]$ oc login -u developer -p developer
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc get nodes
Error from server (Forbidden): nodes is forbidden: User "developer" cannot list resource "nodes" in API group "" at the cluster scope
[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 59 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc get users
NAME        UID                                    FULL NAME   IDENTITIES
admin       045f3fb1-f02d-4f88-ab7a-2539592f1919               myusers:admin
developer   52cef92c-cec5-422f-94dd-e98988ee7c59               myusers:developer
[student@workstation ~]$ oc get identity
NAME                IDP NAME   IDP USER NAME   USER NAME   USER UID
myusers:admin       myusers    admin           admin       045f3fb1-f02d-4f88-ab7a-2539592f1919
myusers:developer   myusers    developer       developer   52cef92c-cec5-422f-94dd-e98988ee7c59
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to ~/DO280/labs/auth-provider/ --confirm
/home/student/DO280/labs/auth-provider/htpasswd
[student@workstation ~]$ htpasswd -b ~/DO280/labs/auth-provider/htpasswd manager redhat
Adding password for user manager
[student@workstation ~]$ cat ~/DO280/labs/auth-provider/htpasswd
admin:$2y$05$xEETU3573YrbGmznTMMBZOSrgcSUpXX5WBqivpRVKDF6MUMO0qSs2
developer:$apr1$fwuleoSK$fijQ.FKM0XsUwedL9EAQ60
manager:$apr1$Zre8tjch$LNpG6KYCg69FtKQok3bKW0
[student@workstation ~]$ oc set data secret/localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers data updated
[student@workstation ~]$ oc login -u manager -p redhat
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc new-project auth-provider
Now using project "auth-provider" on server "https://api.ocp4.example.com:6443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app ruby~https://github.com/sclorg/ruby-ex.git

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node

[student@workstation ~]$ oc login -u developer -p developer
Login successful.

You don't have any projects. You can try to create a new project, by running

    oc new-project <projectname>

[student@workstation ~]$ oc delete project auth-provider
Error from server (Forbidden): projects.project.openshift.io "auth-provider" is forbidden: User "developer" cannot delete resource "projects" in API group "project.openshift.io" in the namespace "auth-provider"

[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to ~/DO280/labs/auth-provider/ --confirm
/home/student/DO280/labs/auth-provider/htpasswd
[student@workstation ~]$ MANAGER_PASSWD="$(openssl rand -hex 15)"
[student@workstation ~]$ htpasswd -b ~/DO280/labs/auth-provider/htpasswd manager ${MANAGER_PASSWD}
Updating password for user manager
[student@workstation ~]$ oc set data secret/localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers data updated
[student@workstation ~]$ oc login -u manager -p ${MANAGER_PASSWD}
Login successful.

You have one project on this server: "auth-provider"

Using project "auth-provider".
[student@workstation ~]$ oc login -u admin -p redhat
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "auth-provider".
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to ~/DO280/labs/auth-provider/ --confirm
/home/student/DO280/labs/auth-provider/htpasswd
[student@workstation ~]$ htpasswd -D ~/DO280/labs/auth-provider/htpasswd manager
Deleting password for user manager
[student@workstation ~]$ oc set data secret/localusers --from-file htpasswd=/home/student/DO280/labs/auth-provider/htpasswd -n openshift-config
secret/localusers data updated
[student@workstation ~]$ oc delete identity "myusers:manager"
identity.user.openshift.io "myusers:manager" deleted
[student@workstation ~]$ oc delete user manager
user.user.openshift.io "manager" deleted
[student@workstation ~]$ oc login -u manager -p ${MANAGER_PASSWD}
Login failed (401 Unauthorized)
Verify you have provided correct credentials.
[student@workstation ~]$ oc get users
NAME        UID                                    FULL NAME   IDENTITIES
admin       045f3fb1-f02d-4f88-ab7a-2539592f1919               myusers:admin
developer   52cef92c-cec5-422f-94dd-e98988ee7c59               myusers:developer
[student@workstation ~]$ oc extract secret/localusers -n openshift-config --to -
# htpasswd
admin:$2y$05$xEETU3573YrbGmznTMMBZOSrgcSUpXX5WBqivpRVKDF6MUMO0qSs2
developer:$apr1$fwuleoSK$fijQ.FKM0XsUwedL9EAQ60
[student@workstation ~]$ oc login -u kubeadmin -p ${RHT_OCP4_KUBEADM_PASSWD}
Login successful.

You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "auth-provider".
[student@workstation ~]$ oc delete project auth-provider
project.project.openshift.io "auth-provider" deleted
[student@workstation ~]$ oc edit oauth
oauth.config.openshift.io/cluster edited
[student@workstation ~]$

Delete all the lines under spec:, and then append {} after spec:. Leave all the
other information in the file unchanged. Your spec: line should match the following:
...output omitted...
spec: {}

[student@workstation ~]$ oc delete secret localusers -n openshift-config
secret "localusers" deleted
[student@workstation ~]$ oc delete user --all
user.user.openshift.io "admin" deleted
user.user.openshift.io "developer" deleted
[student@workstation ~]$ oc delete identity --all
identity.user.openshift.io "myusers:admin" deleted
identity.user.openshift.io "myusers:developer" deleted
[student@workstation ~]$ lab auth-provider finish

Completing Guided Exercise: Configuring Identity Providers

 · Remove exercise files.......................................  SUCCESS
 · Remove solution files.......................................  SUCCESS

Please use start if you wish to do the exercise again.

[student@workstation ~]$ 
------------------CH10-Defining and Applying Permissions Using RBAC-----------------------------------------------
Role-based Access Control (RBAC)
Role-based access control (RBAC) is a technique for managing access to resources in a computer
system. In Red Hat OpenShift, RBAC determines if a user can perform certain actions within the
cluster or project. There are two types of roles that can be used depending on the user's level of
responsibility: cluster and local.
Note
Authorization is a separate step from authentication.

Authorization Process
RBAC Object        Description
Rule              Allowed actions for objects or groups of objects.
Role              Sets of rules. Users and groups can be associated with multiple roles.
Binding           Assignment of users or groups to a role.

RBAC Scope
Role Level        Description
Cluster Role      Users or groups with this role level can manage the OpenShift cluster.
Local Role        Users or groups with this role level can only manage elements at a project level.

Note
Cluster role bindings take precedence over local role bindings.

Managing RBAC Using the CLI
Cluster administrators can use the oc adm policy command to both add and remove cluster
roles and namespace roles.

To add a cluster role to a user, use the add-cluster-role-to-user subcommand:

[user@demo ~]$ oc adm policy add-cluster-role-to-user cluster-role username

For example, to change a regular user to a cluster administrator, use the following command:
[user@demo ~]$ oc adm policy add-cluster-role-to-user cluster-admin username

To remove a cluster role from a user, use the remove-cluster-role-from-user
subcommand:
[user@demo ~]$ oc adm policy remove-cluster-role-from-user cluster-role username

For example, to change a cluster administrator to a regular user, use the following command:
[user@demo ~]$ oc adm policy remove-cluster-role-from-user cluster-admin username

Rules are defined by an action and a resource. For example, the create user rule is part of the
cluster-admin role.
You can use the oc adm policy who-can command to determine if a user can execute an
action on a resource. For example:
[user@demo ~]$ oc adm policy who-can delete user

Default roles   Description
admin           Users with this role can manage all project resources,including granting access to other users to access the project.
basic-user      Users with this role have read access to the project.

cluster-        Users with this role have superuser access to the cluster resources. These users can perform any action on the c       admin           custer and have full control of all projects.

cluster-        Users with this role can get cluster status information.
status

edit            Users with this role can create, change, and delete common application resources from the project, such as services                   and deployment configurations. These users cannot act on management resources such
                as limit ranges and quotas, and cannot manage access permissions to the project.
                
self-           Users with this role can create new projects. This is a cluster role, not a
provisioner      project role.

view              Users with this role can view project resources, but cannot modify project resources.

The admin role gives a user access to project resources such as quotas and limit ranges, and
also the ability to create new applications. The edit role gives a user sufficient access to act
as a developer inside the project, but working under the constraints configured by a project
administrator.
Project administrators can use the oc policy command to add and remove namespace roles.

Add a specified role to a user with the add-role-to-user subcommand. For example:
[user@demo ~]$ oc policy add-role-to-user role-name username -n project

For example, to add the user dev to the role basic-user in the wordpress project:
[user@demo ~]$ oc policy add-role-to-user basic-user dev -n wordpress

User Types
Interaction with OpenShift Container Platform is associated with a user. An OpenShift Container
Platform user object represents a user who can be granted permissions in the system by adding
roles to that user or to a user's group via rolebindings.

Regular users
This is the way most interactive OpenShift Container Platform users are represented. Regular
users are represented with the User object. This type of user represents a person that has
been allowed access to the platform. Examples of regular users include user1 and user2.

System users
Many of these are created automatically when the infrastructure is defined, mainly for
the purpose of enabling the infrastructure to securely interact with the API. System users
include a cluster administrator (with access to everything), a per-node user, users for
routers and registries to use, and various others. An anonymous system user is used by
default for unauthenticated requests. Examples of system users include: system:admin,
system:openshift-registry, and system:node:node1.example.com.

Service accounts
These are special system users associated with projects; some are created automatically
when the project is first created, and project administrators can create more for the
purpose of defining access to the contents of each project. Service accounts are
often used to give extra privileges to pods or deployment configurations. Service
accounts are represented with the ServiceAccount object. Examples of service
ccount users include system:serviceaccount:default:deployer and

system:serviceaccount:foo:builder.

Every user must authenticate before they can access OpenShift Container Platform. API requests
with no authentication or invalid authentication are authenticated as requests by the anonymous
system user. After successful authentication, policy determines what the user is authorized to do.

----------------------CH-10-GE-Defining and Applying Permissions using RBAC -------------------------------
In this exercise, you will define role-based access controls and apply permissions to users.
Outcomes
You should be able to:
• Remove project creation privileges from users who are not OpenShift cluster
administrators.
• Create OpenShift groups and add members to these groups.
• Create a project and assign project administration privileges to the project.
• As a project administrator, assign read and write privileges to different groups of users.
